{"version":3,"sources":["util.js","models.js","generic.js","text.js","ls.js","eq.js","eqls.js","sq.js","sy.js","sysq.js","runner.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnxVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpvhhvfile":"wm.js","sourcesContent":["/**\n * Checks if the array of points contains a specific point.\n * @param array array<array>   An array of array which is a point.\n * @param point array<integer> An array containing two elements [x, y].\n * @return true if array contains the point.\n *         false if:\n *             array is null or undefined\n *             point is null or undefined\n *             array does not contain the point\n */\nfunction arrayHasPoint(array, point) {\n    if(!array || !point)\n        return false;\n\n    for(var i = 0; i < array.length; i++)\n        if(array[i] && array[i][0] == point[0] && array[i][1] == point[1])\n            return true;\n    return false;\n}\n\n/**\n * Shuffles an array in place.\n *\n * @param array The array to be shuffled.\n * @returns the array itself.\n */\nfunction shuffle(array) {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n}\n\n/**\n * Trim null from the end of array, in place.\n *\n * @param array The array to be trimmed.\n * @returns the array itself.\n */\nfunction trimArray(array) {\n    var p = 0;\n    for(var i = 0; i < array.length; i++) {\n        if(array[i] == null) {\n            p = i;\n            break;\n        }\n    }\n    var res = array.splice(0, p);\n    return res;\n}\n\n/**\n * No operation\n */\nfunction nop() {}\n\nvar PointCollection = {\n    indexOf: function(pointArray, point) {\n        for(var i = 0; i < pointArray.length; i++)\n            if(pointArray[i] && pointArray[i][0] == point[0] && pointArray[i][0] == point[0] && pointArray[i][1] == point[1])\n                return i;\n        return -1;\n    }\n};\n\nString.prototype.capitalize = function() {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n}","var EQ = {\n    typeId: 'eq',\n    typeLabel: 'Equation',\n    getAnswer: function(equation) {\n        var p = equation.indexOf('=');\n        return eval(equation.substring(0, p)) == equation.substring(p + 1);\n    },\n    isValid: function(equation) {\n        return /^[()0-9+\\-*\\/]+=\\d+$/.test(equation);\n    },\n    getScore: function(equation, response) {\n        if(this.getAnswer(equation) === response)\n            return 1;\n        return 0;\n    }\n};\n\nvar TEXT = {\n    typeId: 'input',\n    typeLabel: 'Text Input',\n};\n\nvar LS = {\n    typeId: 'ls',\n    typeLabel: 'Letter Sequence',\n    /**\n     * Make a random array of letters (options), including the specified letter array, to be used for recall.\n     *\n     * @param letters array A list of letters to include. This is usually the original list of letters shown to participant.\n     */\n    makeOptions: function(letters) {\n        var res = letters.slice(), a = 'A'.charCodeAt(0), z = 'Z'.charCodeAt(0);\n\n        while(res.length < 12) {\n            //Get a random letter\n            var c = Math.floor(Math.random() * (z - a)) + a;\n            var l = String.fromCharCode(c);\n            \n            if(l != 'A' && l != 'E' && l != 'I' && l != 'O' && l != 'U' && res.indexOf(l) == -1)\n                res.push(l);\n        }\n\n        res = shuffle(res);\n        return res;\n    },\n    makeRandomLetterArray: function(length) {\n        var res = [], a = 'A'.charCodeAt(0), z = 'Z'.charCodeAt(0);\n\n        while(res.length < length) {\n            //Get a random letter\n            var c = Math.floor(Math.random() * (z - a)) + a;\n            var l = String.fromCharCode(c);\n            if(l != 'A' && l != 'E' && l != 'I' && l != 'O' && l != 'U' && res.indexOf(l) == -1)\n                res.push(l);\n        }\n        \n        return res;\n    },\n    getScore: function(letters, response) {\n        var sum = 0;\n        for(var i = 0; i < letters.length; i++)\n            if(letters[i] === response[i])\n                sum++;\n        return sum;\n    }\n};\n\nvar EQLS = {\n    typeId: 'eqls',\n    typeLabel: 'Equation Letters'\n};\n\nvar SQ = {\n    typeId: 'sq',\n    typeLabel: 'Square Sequence',\n    /**\n     * @param length How many squares are to be in the generated sequence.\n     * @returns An array of arrays, where each array represent a point [x, y].\n     */\n    makeRandomFigure: function(length) {\n        var res = [];\n        while(res.length < length) {\n            var x = Math.floor(Math.random() * 4);\n            var y = Math.floor(Math.random() * 4);\n            var p = [x, y];\n            if(!arrayHasPoint(res, p))\n                res.push(p);\n        }\n        return res;\n    },\n    getScore: function(squares, response) {\n        var sum = 0;\n        for(var i = 0; i < squares.length; i++)\n            if(response[i] && squares[i][0] === response[i][0] && squares[i][1] === response[i][1])\n                sum++;\n        return sum;\n    }\n};\n\nvar SY = {\n    typeId: 'sy',\n    typeLabel: 'Symmetry',\n    getRandomPoint: function(array) {\n        var p = [0, 0];\n        do {\n            p[0] = Math.floor(Math.random() * 8);\n            p[1] = Math.floor(Math.random() * 8);\n        } while(arrayHasPoint(array, p));\n        return p;\n    },\n    /**\n     * Generate a random symmetric figure.\n     * @param density integer how many cells are colored. This should be a 0 >= density <= 30.\n     */\n    makeSymmetricFigure: function(density) {\n        if(!density || density < 0 || density > 30)\n            density = Math.floor(Math.random() * 18) + 12;\n\n        var points = [];\n\n        while(points.length < density * 2) {\n            var x = Math.floor(Math.random() * 4);\n            var y = Math.floor(Math.random() * 8);\n            var p = [x, y];\n\n            if(!arrayHasPoint(points, p)) {\n                points.push(p);\n                points.push(this.getMirror(p));\n            }\n        }\n\n        return points;\n    },\n    /**\n     * Generate a asymmetric figure by mutating a random symmetric figure.\n     * @param density integer how many cells are colored. This should be a 0 >= density <= 30.\n     */\n    makeAsymmetricFigure: function(density) {\n        var points = this.makeSymmetricFigure(density);\n\n        for(var i = 0; i < 3; i++) {\n            var op = Math.floor(Math.random() * (i == 0 ? 2 : 3));\n            switch(op) {\n                case 0:\n                    points.push(this.getRandomPoint(points));\n                    break;\n                case 1:\n                    var index = Math.floor(Math.random() * points.length);\n                    points.splice(index, 1);\n                    break;\n            }\n        }\n\n        return points;\n    },\n    /**\n     * Generate a totally random figure.\n     * @param density integer how many cells are colored. This should be a 0 >= density <= 30.\n     */\n    makeRandomFigure: function(density) {\n        if(!density || density < 0 || density > 30)\n            density = Math.floor(Math.random() * 18) + 12;\n\n        var points = [];\n        while(points.length < density * 2) {\n            points.push(this.getRandomPoint(points));\n        }\n        return points;\n    },\n    makeFigure: function() {\n        var density = Math.floor(Math.random() * 18) + 12; \n        switch(Math.floor(Math.random() * 5)) {\n            case 0:\n            case 1:\n                return this.makeSymmetricFigure(density);\n            case 2:\n            case 3:\n                return this.makeAsymmetricFigure(density);\n            case 4:\n                return this.makeRandomFigure(density);\n        }\n\n        return this.makeSymmetricFigure(density);\n    },\n    getMirror: function(p) {\n        return [7 - p[0], p[1]];\n    },\n    /**\n     * Checks a figure, represented by array, is symmetric.\n     * Throws if array is null or undefined.\n     */\n    isSymmetric: function(array) {\n        if(!array)\n            throw 'Figure array is undefined';\n\n        for(var i = 0; i < array.length; i++)\n            if(!arrayHasPoint(array, this.getMirror(array[i])))\n                return false;\n        return true;\n    },\n    getScore: function(symmetry, response) {\n        if(this.isSymmetric(symmetry) === response)\n            return 1;\n        return 0;\n    }\n};\n\nvar SYSQ = {\n    typeId: 'sysq',\n    typeLabel: 'Symmetry Squares',\n    /**\n     * Make a random computer generated problem.\n     * @param length integer The length of the sequence.\n     * @returns An object {type, squares, symmetries}\n     */\n    makeProblem: function(length) {\n        var squares = SQ.makeRandomFigure(length);\n        var symmetries = this.makeSymmetryFigures(length);\n        \n        return {type:this.typeId, squares:squares, symmetries:symmetries};\n    },\n    makeSymmetryFigures: function(length) {\n        var symmetries = [];\n\n        for(var i = 0; i < length; i++)\n            symmetries.push(SY.makeFigure());\n\n        return symmetries;\n    }\n};\n\nvar RS = {\n    typeId: 'rs',\n    typeLabel: 'Sentence'\n};\n\nvar RSLS = {\n    typeId: 'rsls',\n    typeLabel: 'Sentence Letters'\n};\n\nBLK = {\n    getScore: function(probBlock, respBlock) {\n        var sum = 0;\n        for(var i = 0; i < probBlock.problems.length; i++) {\n            var prob = probBlock.problems[i];\n            switch(prob.type) {\n                case LS.typeId: sum += LS.getScore(probBlock.problems[i].letters, respBlock[i].response); break;\n                case EQ.typeId: sum += EQ.getScore(probBlock.problems[i].equation, respBlock[i].response); break;\n                case SQ.typeId: sum += SQ.getScore(probBlock.problems[i].squares, respBlock[i].response); break;\n                case SY.typeId: sum += SY.getScore(probBlock.problems[i].symmetry, respBlock[i].response); break;\n                case EQLS.typeId: sum += LS.getScore(probBlock.problems[i].letters, respBlock[i].letters.response); break;\n                case SYSQ.typeId: sum += SQ.getScore(probBlock.problems[i].squares, respBlock[i].squares.response); break;\n            }\n        }\n        return sum;        \n    },\n    getMaxScore: function(block) {\n        var sum = 0;\n\n        for(var i = 0; i < block.problems.length; i++) {\n            var prob = block.problems[i];\n            switch(prob.type) {\n                case LS.typeId: sum += prob.letters.length; break;\n                case EQ.typeId: sum++; break;\n                case SQ.typeId: sum += prob.squares.length; break;\n                case SY.typeId: sum++; break;\n                case EQLS.typeId: sum += prob.letters.length; break;\n                case SYSQ.typeId: sum += prob.squares.length; break;\n            }\n        }\n\n        return sum;\n    }\n};\n\nTSK = {\n    getScore: function(task, respBlocks) {\n        var sum = 0;\n        for(var i = 0; i < task.blocks.length; i++)\n            if(!task.blocks[i].practice)\n                sum += BLK.getScore(task.blocks[i], respBlocks[i]);\n        return sum;\n    },\n    getMaxScore: function(task) {\n        var sum = 0;\n        for(var i = 0; i < task.blocks.length; i++)\n            if(!task.blocks[i].practice)\n                sum += BLK.getMaxScore(task.blocks[i]);\n        return sum;\n    }\n};","var Instruction = React.createClass({\n    getDefaultProps: function() {\n        return {\n            nextBtnLabel: 'Continue'\n        };\n    },\n    render: function() {\n        var style = this.props.style ? this.props.style : {};\n        if(style) {\n            style.marginBottom = 20;\n        }\n\n        return (\n            <div>\n                <div className=\"row\" style={style}>\n                    <div className=\"col-xs-10 col-xs-offset-1 col-lg-8 col-lg-offset-2\" \n                    style={{\n                        lineHeight: '160%',\n                        textAlign:'justify', fontSize:20,\n                        padding: '20px 25px',\n                        backgroundColor: '#fcfcfc',\n                        border: '1px solid #e1e1e8',\n                        borderRadius: 4\n                    }}>\n                        <div dangerouslySetInnerHTML={{__html: marked(this.props.text)}}/>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-xs-2 col-xs-offset-5\">\n                        <button className=\"btn btn-default\" onClick={this.props.onComplete}>{this.props.nextBtnLabel}</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n});\n\nvar Demographics = React.createClass({\n    complete: function() {\n        this.props.onComplete();\n    },\n    render: function() {\n        var years=[];\n        for(var i = 0; i < 100; i++)\n            years.push(new Date().getFullYear() - 2 - i);\n\n        return (\n            <div>\n                <div className=\"row\" style={{marginBottom:25, fontSize:20}}>\n                    <div className=\"col-xs-12\">Before we start, tell us a little about you</div>\n                </div>\n                <div className=\"row\" style={{marginBottom:25}}>\n                    <div className=\"col-sm-6 col-sm-offset-3\">\n                        <form>\n                            <div className=\"form-group\">\n                                <label className=\"control-label\">Birthday</label>\n                                \n                                <div className=\"row\">\n                                    <div className=\"col-xs-4\">\n                                        <select className=\"form-control\">\n                                            <option value=\"1\">Jan</option><option value=\"2\">Feb</option><option value=\"3\">Mar</option>\n                                            <option value=\"4\">Apr</option><option value=\"5\">May</option><option value=\"6\">Jun</option>\n                                            <option value=\"7\">Jul</option><option value=\"8\">Aug</option><option value=\"9\">Sep</option>\n                                            <option value=\"10\">Oct</option><option value=\"11\">Nov</option><option value=\"12\">Dec</option>\n                                        </select>\n                                    </div>\n                                    <div className=\"col-xs-4\">\n                                        <select className=\"form-control\">\n                                            {[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]\n                                                .map(function(val){\n                                                    return <option value={val}>{val}</option>\n                                                })\n                                            }\n                                        </select>\n                                    </div>\n                                    <div className=\"col-xs-4\">\n                                        <select className=\"form-control\">\n                                            {years.map(function(val){return <option value={val}>{val}</option>})}\n                                        </select>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"form-group\">\n                                <label className=\"control-label\">Gender</label>\n                                <div className=\"row\">\n                                    <div className=\"col-xs-4 col-xs-offset-4\">\n                                        <select className=\"form-control\">\n                                            <option value=\"female\">Female</option>\n                                            <option value=\"male\">Male</option>\n                                        </select>\n                                    </div>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-xs-12\">\n                        <button className=\"btn btn-default\" onClick={this.complete}>Continue</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n});\n\n/**\n * A set of problems.\n * @prop block      array   The set of problems to render\n * @prop tra        object  Task Running Accuracy {correct: integer, total: integer}\n * @prop randomize  boolean If the problems should be shuffled.\n * @prop practice   boolean True if this block is a practice; false if this this block is to be recorded.\n * @prop onComplete callback \n */\nvar Block = React.createClass({\n    getInitialState: function() {\n        this.tra = this.props.tra ? this.props.tra : this.props.keepTra ? {correct:0, total:0} : null;\n        this.res = [];\n        \n        return {\n            block: this.props.randomize ? shuffle(this.props.block) : this.props.block,\n            progress: 0\n        };\n    },\n    advance: function(res, tra) {\n        this.res.push(res);\n        this.tra = tra;\n        \n        if(this.state.progress == this.state.block.length - 1) {\n            this.onComplete(this.res, this.tra);\n        }\n        else {\n            this.setState({progress: this.state.progress + 1});\n        }\n    },\n    onComplete: function(res, tra) {\n        res.sort(function(a, b){return a.probId - b.probId});\n        this.props.onComplete(this.res, this.tra);\n    },\n    render: function() {\n        var block = this.state.block;\n        var progress = this.state.progress;\n\n        switch(block[progress].type) {\n            case TEXT.typeId:\n                return (\n                    <TextInput key={progress} probId={block[progress].id} questionId={block[progress].questionId} text={block[progress].text}\n                               onComplete={this.advance} />\n                );\n            case LS.typeId:\n                return (\n                    <LetterSequence key={progress} probId={block[progress].id} questionId={block[progress].questionId} letters={block[progress].letters}\n                        onComplete={this.advance} report={this.props.practice} />\n                );\n            case EQ.typeId:\n                return (\n                    <MathEq key={progress} probId={block[progress].id} questionId={block[progress].questionId} equation={block[progress].equation}\n                        feedback={this.props.practice} onComplete={this.advance} />\n                );\n            case EQLS.typeId:\n                return (\n                    <MathLetter key={progress} problem={block[progress]} questionId={block[progress].questionId}\n                        tra={this.tra}\n                        feedback={this.props.practice}\n                        timeLimit={this.props.timeLimit}\n                        onComplete={this.advance} />\n                );\n            case SQ.typeId:\n                return <BoxSequence key={progress} probId={block[progress].id} questionId={block[progress].questionId} sequence={block[progress].squares} feedback={this.props.practice} onComplete={this.advance}/>\n            case SY.typeId:\n                return <SymmetryTest key={progress} probId={block[progress].id} questionId={block[progress].questionId} colored={block[progress].symmetry} feedback={this.props.practice} onComplete={this.advance} />\n            case SYSQ.typeId:\n                return (\n                    <SymmetryBoxSequence key={progress}\n                        problem={block[progress]} questionId={block[progress].questionId}\n                        tra={this.tra}\n                        feedback={this.props.practice}\n                        timeLimit={this.props.timeLimit}\n                        onComplete={this.advance} />\n                );\n            case RS.typeId:\n                return (\n                    <SentenceQuestion key={progress}\n                        sentence={block[progress].sentence}\n                        sol={block[progress].sol}\n                        feedback={this.props.practice}\n                        onComplete={this.advance} />\n                );\n            case RSLS.typeId:\n                return (\n                    <SentenceLetter key={progress}\n                        sentences={block[progress].sentences}\n                        letters={block[progress].letters}\n                        feedback={this.props.practice}\n                        onComplete={this.advance} />\n                );\n        }\n    }\n});\n\n/**\n * A set of blocks to be presented to the user.\n *\n * @prop blocks     array    An array of blocks to render.\n * @prop keepTra    boolean  If task running accuracy should be kept and displayed.\n * @prop randomize  boolean \n * @prop onComplete callback\n */\nvar Assessment = React.createClass({\n    propTypes: {\n        blocks: React.PropTypes.array.isRequired,\n        keepTra: React.PropTypes.bool,\n        randomize: React.PropTypes.bool,\n        onComplete: React.PropTypes.func\n    },\n    getInitialState: function() {\n        if(this.props.keepTra)\n            this.tra = {correct: 0, total: 0};\n        \n        this.res = [];\n\n        return {progress: 0};\n    },\n    advance: function(res, tra) {\n        if(this.state.progress == this.props.blocks.length - 1) {\n            this.props.onComplete(this.res);\n        }\n        else {\n            this.res.push(res);\n            this.tra = tra;\n            this.setState({progress: this.state.progress + 1});\n        }\n    },\n    render: function() {\n        return (\n            <Block key={this.state.progress} block={this.props.blocks[this.state.progress]} tra={this.tra} onComplete={this.advance}\n                randomize={this.props.randomize} practice={false} />\n        );\n    }\n});\n\n/**\n * Message when problem is answered too slowly.\n *\n * @prop type   string The problem type.\n * @prop traLow number The lower threshold.\n * @onComplete callback\n */\nvar Timeout = React.createClass({\n    onComplete: function() {\n        if(this.props.onComplete)\n            this.props.onComplete();\n    },\n    render: function() {\n        return (\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-xs-12\" style={{fontSize:25, marginTop:100}}>\n                        {\n                            this.props.type === 'math' ?\n                                translate('Please try to solve each math problem as quickly as you can.') :\n                                translate('Please try to identify each symmetric and asymmetric figure as quickly as you can.')\n                        }\n                    </div>\n                </div>\n                <div className=\"row\" style={{marginTop:25}}>\n                    <div className=\"col-xs-12\" style={{textAlign:'center'}}>\n                        <button className=\"btn btn-default\" onClick={this.onComplete}>{translate('Got it')}</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n});\n\n/**\n * Message when the TRA is too low.\n *\n * @prop type   string The problem type.\n * @prop traLow number The lower threshold.\n * @onComplete callback\n */\nvar LowTra = React.createClass({\n    onComplete: function() {\n        if(this.props.onComplete)\n            this.props.onComplete();\n    },\n    render: function() {\n        return (\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-xs-12\" style={{fontSize:25, marginTop:100}}>\n                        {\n                            this.props.type === 'math' ? \n                                translate('Please try to solve each math problem correctly, as quickly as you can.') :\n                                translate('Please try to identify each symmetric and asymmetric figure correctly, as quickly as you can.')\n                        }\n                    </div>\n                </div>\n                <div className=\"row\" style={{marginTop:25}}>\n                    <div className=\"col-xs-12\" style={{textAlign:'center'}}>\n                        <button className=\"btn btn-default\" onClick={this.onComplete}>{translate('Got it')}</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n});\n\nvar PartInfoForm = React.createClass({\n    propTypes: {\n        onComplete: React.PropTypes.func.isRequired\n    },\n    onComplete: function() {\n        var workerId = this.refs.workerId.getDOMNode().value.trim();\n        var qualId = this.refs.qualId.getDOMNode().value.trim();\n\n        if(workerId && workerId != '' && qualId && qualId != '' && /^\\d+$/.test(qualId))\n            this.props.onComplete(workerId, qualId);\n    },\n    render: function() {\n        return (\n            <div>\n                <div className=\"row\" style={{marginBottom:25}}>\n                    <div className=\"col-xs-4 col-xs-offset-4 col-sm-2 col-sm-offset-5 form-Group\">\n                        <label className=\"form-label\">Worker Identifier</label>\n                        <input type=\"text\" ref=\"workerId\" className=\"form-control\" style={{textAlign:'center'}}/>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-xs-4 col-xs-offset-4 col-sm-2 col-sm-offset-5 form-group\">\n                        <label className=\"form-label\">Validation Code</label>\n                        <input type=\"text\" ref=\"qualId\" className=\"form-control\" style={{textAlign:'center'}}/>\n                    </div>\n                </div>\n                <div className=\"row\" style={{marginTop:25}}>\n                    <div className=\"col-xs-12\" style={{textAlign:'center'}}>\n                        <button type=\"button\" className=\"btn btn-default\" onClick={this.onComplete}>Continue</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n});","var TextInput = React.createClass({\r\n    propTypes: {\r\n        probId: React.PropTypes.number.isRequired,\r\n        questionId: React.PropTypes.number.isRequired,\r\n        text: React.PropTypes.string.isRequired,\r\n        onComplete: React.PropTypes.func.isRequired\r\n    },\r\n\r\n    getInitialState: function() {\r\n        return {\r\n            input: \"\",\r\n        }\r\n    },\r\n\r\n    handleChange: function(event) {\r\n        this.setState({input: event.target.value});\r\n    },\r\n\r\n    complete: function() {\r\n        var response = {\r\n            probId: this.props.probId,\r\n            questionId: this.props.questionId,\r\n            response: this.state.input,\r\n        };\r\n        this.props.onComplete(response);\r\n    },\r\n\r\n    render: function() {\r\n        return (\r\n            <div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-xs-10 col-xs-offset-1 col-lg-8 col-lg-offset-2\"\r\n                    style={{\r\n                        lineHeight: '160%',\r\n                        textAlign:'justify', fontSize:20,\r\n                        padding: '20px 25px',\r\n                        backgroundColor: '#fcfcfc',\r\n                        border: '1px solid #e1e1e8',\r\n                        borderRadius: 4\r\n                    }}>\r\n                        <div dangerouslySetInnerHTML={{__html: marked(this.props.text)}}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-xs-10 col-xs-offset-1 col-lg-8 col-lg-offset-2\"\r\n                         style={{\r\n                             lineHeight: '160%',\r\n                             textAlign:'justify', fontSize: 20,\r\n                             padding: '20px 0',\r\n                         }}>\r\n                        <input type=\"text\" value={this.state.input} onChange={this.handleChange}\r\n                            style={{\r\n                                width: '100%',\r\n                                border: '2px solid #e1e1e8',\r\n                                borderRadius: 4,\r\n                                padding: '10px',\r\n                                fontSize: 24\r\n                            }} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-xs-2 col-xs-offset-5\">\r\n                        <button className=\"btn btn-default\" onClick={this.complete}>Continue</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n});","var SingleLetterSlide = React.createClass({\n    propTypes: {\n        letter: React.PropTypes.string.isRequired\n    },\n    render: function() {\n        return <div style={{fontSize:75}}>{this.props.letter}</div>;\n    }\n});\n\n/**\n * Letter recall screen.\n * @prop letters     array\n * @prop limitSelect boolean Limit the number of selections to the number alphabets shown.\n * @prop onSubmitResponse callback\n */ \nvar LetterRecall = React.createClass({\n    propTypes: {\n        letters: React.PropTypes.array.isRequired,\n        limitSelect: React.PropTypes.bool,\n        onSubmitResponse: React.PropTypes.func.isRequired\n    },\n    getInitialState: function() {\n        var selects =[];\n        var limit = this.props.limitSelect ? this.props.letters.length: 12;\n        for(var i = 0;  i < limit; i++)\n            selects.push(null);\n\n        return {\n            options: LS.makeOptions(this.props.letters),\n            //selects stores the order in which slots were selected.\n            //For example, if the 3rd slot were select first, then 1st slot, and finally 2nd slot,\n            //select would contain the values [3, 1, 2]\n            selects: selects\n        };\n    },\n    componentDidMount: function() {\n        this.startTime = new Date().getTime();\n    },\n    render: function() {\n        return (\n            <div>\n                <div className=\"row\">\n                    {\n                        this.state.options.map(function(letter, index){\n                            var s = this.state.selects.indexOf(index);\n                            return (\n                                <div key={index} className=\"col-xs-4\" onClick={this.letterClicked.bind(this, index)} style={{paddingTop:20, paddingBottom:20}}>\n                                    <div style={{fontSize:45, cursor:'pointer'}}>\n                                        {letter}\n                                    \n                                        <div style={{display:'inline-block', textAlign:'center', width:50, position:'relative', top:-5}}>\n                                            <span className=\"badge\" style={{fontSize:30, backgroundColor:'#5bc0de'}}>\n                                                {s == -1 ? '' : s + 1}\n                                            </span>\n                                        </div>\n                                    </div>\n                                </div>\n                            );\n                        }, this)\n                    }  \n                </div>\n                <div className=\"row\" style={{marginTop:25}}>\n                    <div className=\"col-xs-6\">\n                        <button className=\"btn btn-default pull-right\" onClick={this.clearSelects}>{translate('Clear')}</button>\n                    </div>\n                    <div className=\"col-xs-6\">\n                        <button className=\"btn btn-default pull-left\" onClick={this.submitResponse}>{translate('Continue')}</button>\n                    </div>\n                </div>\n            </div>\n        );\n    },\n    letterClicked: function(index, event) {\n\n        var i = this.state.selects.indexOf(index);\n\n        //If this index is already selected, deselect it.\n        if(i != -1) {\n            this.state.selects[i] = null;\n            this.setState({selects:this.state.selects});\n        }\n        //Else, select the index (put into this.state.selects).\n        else {\n            for(var j = 0; j < this.state.selects.length; j++) {\n                if(this.state.selects[j] == null) {\n                    this.state.selects[j] = index;\n                    this.setState({selects:this.state.selects});\n                    break;\n                }\n            }\n        }\n    },\n    clearSelects: function() {\n        for(var i = 0; i < this.state.selects.length; i++) {\n            this.state.selects[i] = null;\n        }\n        this.setState({selects:this.state.selects});\n    },\n    submitResponse: function() {\n        //Get the response time\n        var endTime = new Date().getTime();\n        var time = endTime - this.startTime;\n\n        //Map select indexes to letters\n        var options = this.state.options;\n        var response = trimArray(this.state.selects).map(function(i){return options[i]});\n\n        this.props.onSubmitResponse(this.state.options, response, time);\n    }\n});\n\nvar LetterSequenceReport = React.createClass({\n    propTypes: {\n        letters: React.PropTypes.array.isRequired,\n        response: React.PropTypes.object.isRequired\n    },\n    complete: function() {\n        this.props.onComplete();\n    },\n    render: function() {\n        var letters = this.props.letters;\n        var options = this.props.response.options;\n        var response = this.props.response.response;\n        var time = this.props.response.time;\n\n        //Calculate correct count\n        var correctCount = 0;\n        for(var i = 0; i < letters.length; i++) {\n            if(letters[i] == response[i])\n                correctCount++;\n        }\n\n        return (\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-xs-12\" style={{fontSize:25, marginBottom:25}}>\n                        {translate('You recalled')} {correctCount} {translate('out of')} {letters.length} {translate('letters correctly')}.\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-xs-12\">\n                        <button className=\"btn btn-default\" onClick={this.complete}>{translate('Continue')}</button>\n                    </div>\n                </div>\n            </div>\n        );\n\n    }\n});\n\n/**\n * @prop probId The problem id.\n * @prop questionId The id of the assessment question.\n * @prop letters The list of alphabets to present to user.\n * @prop report  Indicates if the result of this assessment should be displayed.\n * @prop onComplete The callback when this component is finished.\n */\nvar LetterSequence = React.createClass({\n    propTypes: {\n        probId: React.PropTypes.number.isRequired,\n        questionId: React.PropTypes.number.isRequired,\n        letters: React.PropTypes.array.isRequired,\n        report: React.PropTypes.bool,\n        onComplete: React.PropTypes.func.isRequired\n    },\n    /**\n     * Gets the initial state of this component.\n     * Stages: 'flash', 'recall', 'report'\n     */\n    getInitialState: function() {\n        return {count:0, stage:'flash'};\n    },\n    componentDidMount: function() {\n        this.timer = setInterval(this.timerTick, 1000);\n    },\n    timerTick: function() {\n        var count = this.state.count + 1;\n\n        if(count == this.props.letters.length) {\n            clearInterval(this.timer);\n            this.state.stage = 'recall';\n        }\n\n        this.setState({count:count});\n    },\n    /**\n     * @params challenge array  The list of letters presented to the user on the recall screen.\n     * @params selections array User's selections.\n     */\n    handleResponse: function(options, response, time) {\n        if(this.props.probId != undefined && this.props.probId != null)\n            this.response = {probId: this.props.probId, questionId: this.props.questionId, options: options, response: response, time: time};\n        else\n            this.response = {options: options, response: response, time: time};\n\n        if(this.props.report)\n            this.setState({stage: 'report'});\n        else\n            this.complete();\n    },\n    complete: function() {\n        this.props.onComplete(this.response);\n    },\n    render: function() {\n        //If there are still more letters, display the letters.\n        if(this.state.stage == 'flash') {\n            return (<SingleLetterSlide letter={this.props.letters[this.state.count]} />);\n        }\n        else if(this.state.stage == 'recall') {\n            return (<LetterRecall letters={this.props.letters} onSubmitResponse={this.handleResponse}/>);\n        }\n        else {\n            return <LetterSequenceReport letters={this.props.letters} response={this.response} onComplete={this.complete}/>\n        }\n    }\n});","/**\n * @prop equation string     The equation of this problem.\n * @prop feedback boolean    Whether to display feedback to the user.\n * @prop onComplete callback The callback when this component is finished.\n */\nvar MathEq = React.createClass({\n    propTypes: {\n        probId: React.PropTypes.number.isRequired,\n        questionId: React.PropTypes.number.isRequired,\n        equation: React.PropTypes.string.isRequired,\n        feedback: React.PropTypes.bool,\n        onComplete: React.PropTypes.func.isRequired,\n        timeLimit: React.PropTypes.number.isRequired,\n    },\n    getInitialState: function() {\n        return {stage: 0};\n    },\n    handleSubmit: function(response, startTime, endTime) {\n        this.response = {\n            probId: this.props.probId,\n            questionId: this.props.questionId,\n            response: response,\n            time: endTime - startTime\n        }\n\n        if(this.props.feedback) {\n            this.setState({stage:1});\n        }\n        else {\n            this.complete();\n        }\n    },\n    complete: function() {\n        this.props.onComplete(this.response);\n    },\n    render: function() {\n        switch(this.state.stage) {\n            case 0:\n                return <MathEq.Equation equation={this.props.equation} onSubmit={this.handleSubmit} />\n            case 1:\n                return (\n                    <MathEq.Feedback equation={this.props.equation} response={this.response}\n                        showTime={true} onComplete={this.complete} />\n                );\n        }\n    }\n});\n\n/**\n * @prop equation string\n * @prop tra      object\n * @prop onSubmit callback\n */\nMathEq.Equation = React.createClass({\n    componentDidMount: function() {\n        MathJax.Hub.Queue(['Typeset', MathJax.Hub, 'equation']);\n        MathJax.Hub.Queue(['afterTypeSet', this]);\n    },\n    afterTypeSet: function() {\n        this.pause = setInterval(this.afterRenderPause, 500);\n    },\n    /**\n     * Show the content after giving Mathjax a short pause to render the equation.\n     */\n    afterRenderPause: function() {\n        clearInterval(this.pause);\n        $('#component').css('visibility', 'visible');\n        this.startTime = new Date().getTime();\n        this.timeLimit = setInterval(this.onEquationTimeUp, (this.props.timeLimit ? this.props.timeLimit : 8000));\n    },\n    onEquationTimeUp: function() {\n        clearInterval(this.timeLimit);\n        var endTime = new Date().getTime();\n        //console.log('time is up: ', endTime - this.startTime);\n        this.props.onSubmit(null, this.startTime, endTime);\n    },\n    submitTrue: function() {\n        this.handleSubmit(true);\n    },\n    submitFalse: function() {\n        this.handleSubmit(false);\n    },\n    handleSubmit: function(res) {\n        clearInterval(this.timeLimit);\n        var endTime = new Date().getTime();\n        //console.log('submitted early: ', endTime - this.startTime);\n        this.props.onSubmit(res, this.startTime, endTime);\n    },\n    render: function() {\n        var equation = this.props.equation.replace(/\\*/g, '\\\\times');\n\n        return (\n            <div style={{visibility:'hidden'}} id=\"component\">\n                <div className=\"row\" style={{marginBottom:60}}>\n                    <div className=\"col-xs-12\" id=\"equation\" style={{fontSize:35}}\n                        dangerouslySetInnerHTML={{__html: '`' + equation + '`'}}>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-xs-6\">\n                        <button className=\"btn btn-default pull-right\" onClick={this.submitTrue}>{translate('True')}</button>\n                    </div>\n                    <div className=\"col-xs-6\">\n                        <button className=\"btn btn-default pull-left\" onClick={this.submitFalse}>{translate('False')}</button>\n                    </div>\n                </div>\n                {\n                    this.props.tra ? <MathEq.Tra tra={this.props.tra} /> : null\n                }\n            </div>\n        );\n    }\n});\n\n/*\n * @prop tra object Task Running Accuracy\n */\nMathEq.Tra = React.createClass({\n    render: function() {\n        return null;\n        // return (\n        //     <div style={{position:'fixed', bottom:-100, left:0, width:'100%', textAlign:'center'}}>\n        //         <b>Math Accuracy</b> <br/> Correct: {this.props.tra.correct} | Incorrect: {this.props.tra.total - this.props.tra.correct} | Total: {this.props.tra.total}\n        //     </div>\n        // );\n    }\n});\n\n/**\n * @prop equation   string  The problem.\n * @prop response   boolean User's response.\n * @prop startTime  integer See return value of getTime() of JavaScript's Date object.\n * @prop endTime    integer\n * @prop showTime   boolean If this feedback should show user's response time.\n * @prop onComplete callback\n */\nMathEq.Feedback = React.createClass({\n    complete: function() {\n        this.props.onComplete();\n    },\n    render: function() {\n        return (\n            <div>\n                <div className=\"row\" style={{marginBottom:25}}>\n                    <div className=\"col-xs-12\" style={{fontSize:25}}>\n                        {EQ.getAnswer(this.props.equation) === this.props.response.response ? translate('Correct') : translate('Incorrect')}!\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-xs-12\">\n                        <button className=\"btn btn-default\" onClick={this.complete}>{translate('Continue')}</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n});","/**\n * Dependencies\n *   - ls.js\n *   - eq.js\n */\n\n/**\n * A math-letter sequence problem.\n *\n * @prop problem object required\n * @prop tra     object optional\n *   Task Running accuracy which is a running accuracy of all blocks. This object has the format\n *   {correct: integer, total: integer}, which are correct count and total count.\n * @prop feedback boolean\n * @prop onComplete callback\n */\nvar MathLetter = React.createClass({\n    getInitialState: function() {\n        return {stage: 0, tra: this.props.tra};\n    },\n    advance: function() {\n        if(this.state.stage < 1 || (this.state.stage == 1 && this.props.feedback))\n            this.setState({stage: this.state.stage + 1});\n        else {\n            var response = {probId: this.props.problem.id, questionId: this.props.questionId, letters: this.recallRes, equations: this.mathRes};\n            this.props.onComplete(response, this.state.tra);\n        }\n    },\n    /**\n     * When MathLetter.Sequence component is completed.\n     * @param mathRes array<object> An array of object of user responses to math problems.\n     */\n    onSequenceComplete: function(mathRes, tra) {\n        this.mathRes = mathRes;\n        this.state.tra = tra;\n        this.advance();\n    },\n    /**\n     * @param options array<string>  All choices (letters) presented to the user on the recall screen.\n     * @prarm indexes   array<Integer> user response as an array of indexes.\n     * @param startTime integer        See getTime() of date object.\n     * @param endTime   integer        See getTime() of date object.\n     */\n    onSubmitRecall: function(options, response, time) {\n        //Save the recall result\n        this.recallRes = {options: options, response: response, time: time};\n        this.advance();\n    },\n    render: function() {\n        switch(this.state.stage) {\n            case 0:\n                return <MathLetter.Sequence problem={this.props.problem} tra={this.props.tra} timeLimit={this.props.timeLimit} onComplete={this.onSequenceComplete}/>\n            case 1:\n                return <LetterRecall letters={this.props.problem.letters} onSubmitResponse={this.onSubmitRecall}/>\n            case 2:\n                return <MathLetter.Feedback problem={this.props.problem} mathRes={this.mathRes} recallRes={this.recallRes} onComplete={this.advance}/>\n        }   \n    }\n});\n\n/**\n * Displays a sequence of alternating math equations and letters.\n * @prop problem object An object with fields {type, letters, equations}.\n * @prop tra     object See MathLetter component.\n * @prop traLow  number Lower threshold for TRA. If the TRA is below this, the task is stopped. Default 90%\n * @prop onComplete callback\n */\nMathLetter.Sequence = React.createClass({\n    getDefaultProps: function() {\n        return {\n            traLow: 0.9\n        };\n    },\n    getInitialState: function() {\n        //An array of math responses\n        this.mathRes = [];\n\n        return {\n            count:  0,\n            tra:    this.props.tra,\n            showLowTra: false,\n            showedLowTra: false,\n            showTimeout: false,\n            showedTimeout: false,\n        };\n    },\n    componentDidUpdate: function() {\n        if (this.state.count % 2 != 0) {\n            this.timer = setInterval(this.onLetterTimeUp, 1000);\n        }\n    },\n    onLetterTimeUp: function() {\n        clearInterval(this.timer);\n        this.advance();\n    },\n    onMathSubmit: function(response, startTime, endTime) {\n        this.mathRes.push({response: response, time: endTime - startTime});\n        //console.log('response', response);\n\n        if (response == null && this.state.showedTimeout == false)\n            return this.setState({showTimeout:true, showedTimeout:true});\n\n        this.adjustTra(response);\n\n        if(this.props.tra && this.state.tra.total > 2 &&\n            !this.state.showedLowTra &&\n            response !== EQ.getAnswer(this.props.problem.equations[Math.floor(this.state.count /2)]) &&\n            this.state.tra.correct / this.state.tra.total < this.props.traLow)\n            return this.setState({showLowTra:true, showedLowTra:true});\n\n        this.advance();\n    },\n    onLowTraComplete: function() {\n        this.state.showLowTra = false;\n        this.advance();\n    },\n    onTimeoutComplete: function() {\n        this.state.showTimeout = false;\n        this.state.showedTimeout = false;\n        this.advance();\n    },\n    /**\n     * @param response boolean Participant's response to equation problem.\n     */\n    adjustTra: function(response) {\n        if(!this.state.tra)\n            return;\n\n        var i = Math.floor(this.state.count / 2);\n        var a = EQ.getAnswer(this.props.problem.equations[i]);\n        var tra = this.state.tra;\n        if(response == a)\n            tra.correct++;\n        tra.total++;\n        this.setState({tra: tra});\n    },\n    advance: function() {\n        if(this.state.count < (this.props.problem.letters.length * 2 - 1)) {\n            this.setState({count: this.state.count + 1});\n        }\n        else\n            this.props.onComplete(this.mathRes, this.state.tra);\n    },\n    render: function() {\n        if(this.state.showLowTra)\n            return <LowTra type={'math'} traLow={this.props.traLow} onComplete={this.onLowTraComplete}/>\n\n        if(this.state.showTimeout)\n            return <Timeout type={'math'} onComplete={this.onTimeoutComplete}/>\n\n        if(this.state.count % 2 == 0) {\n            return (\n                <MathEq.Equation key={this.state.count}\n                    equation={this.props.problem.equations[Math.floor(this.state.count / 2)]}\n                    tra={this.state.tra}\n                    timeLimit={this.props.timeLimit}\n                    onSubmit={this.onMathSubmit} />\n            );\n        }\n        else {\n            return (\n                <SingleLetterSlide\n                    key={this.state.count}\n                    letter={this.props.problem.letters[Math.floor(this.state.count / 2)]} />\n            );\n        }\n    }\n});\n\n/**\n * @prop problem    The original problem.\n * @prop mathRes    Math problem responses from the user.\n * @prop recallRes  Letter recall response from the user.\n * @prop onComplete callback\n */\nMathLetter.Feedback = React.createClass({\n    getMathCorrectCount: function() {\n        var res = 0;\n        for(var i = 0; i < this.props.problem.equations.length; i++) {\n            if(this.props.mathRes[i].response == EQ.getAnswer(this.props.problem.equations[i]))\n                res++;\n        }\n        return res;\n    },\n    getLetterCorrectCount: function() {\n        var res = 0;\n\n        for(var i = 0; i < this.props.problem.letters.length; i++)\n            if(this.props.problem.letters[i] == this.props.recallRes.response[i])\n                res++;\n\n        return res;\n    },\n    complete: function() {\n        this.props.onComplete();\n    },\n    render: function() {\n        var mc = this.getMathCorrectCount();\n        var lc = this.getLetterCorrectCount();\n        var ml = this.props.problem.equations.length; //Math problem length\n        var ll = this.props.problem.letters.length;  //Letters length\n\n        return (\n            <div style={{fontSize:22}}>\n                <div className=\"row\" style={{marginBottom:20}}>\n                    <div className=\"col-xs-12\">\n                        {translate('You recalled')} {lc} {translate('out of')} {ll} {translate('letters correctly')}.\n                    </div>\n                </div>\n                <div className=\"row\" style={{marginBottom:25}}>\n                    <div className=\"col-xs-12\">\n                        {translate('You answered')} {mc} {translate('out of')} {ml} {translate('math questions correctly')}.\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-xs-12\">\n                        <button className=\"btn btn-default\" onClick={this.complete}>{translate('Continue')}</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n});","/**\n * The root component of the box sequence problem.\n * This component does the following\n *   1. Displays the sequence component.\n *   2. Displays the recall component.\n *   3. Optionally displays the feedback component.\n * @prop sequence   array<point> An array of colored cells.\n * @prop feedback   boolean      If feedback should be displayed.\n * @prop onComplete callback\n */\nvar BoxSequence = React.createClass({\n    propTypes: {\n        probId: React.PropTypes.number.isRequired,\n        questionId: React.PropTypes.number.isRequired,\n        sequence: React.PropTypes.array.isRequired,\n        feedback: React.PropTypes.bool,\n        onComplete: React.PropTypes.func.isRequired\n    },\n    getInitialState: function() {\n        return {stage: 0};\n    },\n    advance: function() {\n        if(this.state.stage < 1 || (this.state.stage == 1 && this.props.feedback))\n            this.setState({stage: this.state.stage + 1});\n        else\n            this.props.onComplete({probId: this.props.probId, questionId: this.props.questionId, response: this.res.res, time: (this.res.endTime - this.res.startTime)});\n    },\n    /**\n     * Handles recall response from the user.\n     * @param res       array<point> A list of cells where user clicked, in the order they were clicked.\n     * @param startTime integer\n     * @param endTime   integer\n     */\n    onRecallComplete: function(res, startTime, endTime) {\n        this.res = {res: res, startTime: startTime, endTime: endTime};\n        this.advance();\n    },\n    render: function() {\n        switch(this.state.stage) {\n            case 0:\n                return (\n                    <BoxSequence.SlideSet sequence={this.props.sequence} onComplete={this.advance} />\n                );\n            case 1:\n                return (\n                    <BoxSequence.Recall sequence={this.props.sequence} onComplete={this.onRecallComplete} />\n                );\n            case 2:\n                return (\n                    <BoxSequence.Feedback sequence={this.props.sequence} response={this.res} onComplete={this.advance} />\n                );\n        }\n    },\n    statics: {\n        generateRandomProblem: function(length) {\n            var res = {type: 'squares', problem: []};\n\n            while(res.problem.length < length) {\n                var x = Math.floor(Math.random() * 4);\n                var y = Math.floor(Math.random() * 4);\n                var p = [x, y];\n                if(!arrayHasPoint(res.problem, p))\n                    res.problem.push(p);\n            }\n\n            return res;\n        }\n    }\n});\n\n/**\n * Displays a sequence colored boxes.\n * @prop sequence array<point> An array of locations.\n * @prop onComplete callback\n */\nBoxSequence.SlideSet = React.createClass({\n    getInitialState: function() {\n        return {count: 0};\n    },\n    advance: function() {\n        if(this.state.count < this.props.sequence.length - 1)\n            this.setState({count: this.state.count + 1});\n        else\n            this.props.onComplete();\n    },\n    render: function() {\n        return (\n            <BoxSequence.Slide \n                key={this.state.count}\n                colored={[this.props.sequence[this.state.count]]}\n                onComplete={this.advance} />\n        );\n    }\n});\n\n/**\n * A single slide of the sequence.\n * @prop colored array<point> An array specified which box should be color-filled.\n * @prop onComplete callback\n */\nBoxSequence.Slide = React.createClass({\n    componentDidMount: function() {\n        this.timer = setInterval(this.timeup, 1000);\n    },\n    timeup: function() {\n        clearInterval(this.timer);\n        this.props.onComplete();\n    },\n    render: function() {\n        return (\n            <div>\n                <div className=\"row\" style={{marginBottom:20}}>\n                    <div className=\"col-xs-12\" style={{fontSize:20, textAlign:'center'}}>\n                        &nbsp;\n                    </div>\n                </div>\n                <div className=\"row\" style={{marginBottom:25}}>\n                    <div className=\"col-md-6 col-md-offset-3 col-xs-8 col-xs-offset-2\">\n                        <BoxSequence.Slide.Figure rows={4} cols={4} colored={this.props.colored} />\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-xs-12\">\n                        <button className=\"btn btn-default\" style={{visibility:'hidden'}}>Spacer</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n});\n\n/**\n * @prop rows        integer       Number of rows.\n * @prop cols        integer       Number of columns.\n * @prop colored     array<point>  An array specified which box should be color-filled.\n * @prop cellText    array<object> Cell text with format {loc: [x, y], text:'text'}.\n * @prop borderColor string        Color code of border. \n * @prop loColor     string        Color code of non-highlighted cell.\n * @prop hiColor     string        Color code of highlighted cell.\n * @prop onCellClick callback\n */\nBoxSequence.Slide.Figure = React.createClass({\n    propTypes: {\n        rows: React.PropTypes.number.isRequired,\n        cols: React.PropTypes.number.isRequired,\n        colored: React.PropTypes.array,\n        cellText: React.PropTypes.array,\n        borderColor: React.PropTypes.string,\n        loColor: React.PropTypes.string,\n        hiColor: React.PropTypes.string,\n        class: React.PropTypes.string,\n        onCellClick: React.PropTypes.func\n    },\n    getDefaultProps: function() {\n        return {\n            borderColor: '#555',\n            loColor: '#ffffff',\n            hiColor: '#005997',\n        };\n    },\n    componentDidMount: function() {\n        var svg = this.props.class ? $('') : $('svg.' + this.props.class);\n        var width = svg.width();\n        svg.height(width);\n    },\n    onCellClick: function(cell) {\n        if(this.props.onCellClick)\n            this.props.onCellClick(cell);\n    },\n    /**\n     * Checks if a cell is colored against props 'colored'.\n     * @param cell array<integer> An array consisting two elements [x, y].\n     */\n    cellIsColored: function(cell) {\n        if(!this.props.colored)\n            return false;\n\n        for(var i = 0; i < this.props.colored.length; i++)\n            if(cell[0] == this.props.colored[i][0] && cell[1] == this.props.colored[i][1])\n                return true;\n        return false;\n    },\n    /**\n     * Returns the index of this.props.cellText for this cell, or -1 if this cell\n     * does not have text.\n     */\n    cellTextIndex: function(cell) {\n        if(!this.props.cellText)\n            return -1;\n        for(var i = 0; i < this.props.cellText.length; i++)\n            if(this.props.cellText[i].loc &&\n                cell[0] == this.props.cellText[i].loc[0] && \n                cell[1] == this.props.cellText[i].loc[1])\n                return i;\n        return -1;\n    },\n    render: function() {\n        var x0 = 25, y0 = 25;\n        var width = 100;\n        var cells = [];\n\n        //Make the cells to draw\n        for(var x = 0; x < this.props.cols; x++)\n            for(var y = 0; y < this.props.rows; y++)\n                cells.push([x, y]);\n\n        var viewBoxW = this.props.cols * width + x0;\n        var viewBoxH = this.props.rows * width + y0;\n\n        return (\n            <svg className={this.props.class} style={{width:'100%'}} viewBox={'0 0 ' + viewBoxH + ' ' + viewBoxH}>\n                {\n                    cells.map(function(cell, index) {\n                        if(this.cellTextIndex(cell) != -1)\n                            return (\n                                <g key={index} onClick={this.onCellClick.bind(this, cell)} style={{cursor:this.props.onCellClick ? 'pointer' : 'auto'}}>\n                                    <rect x={x0 + width * cell[0]} y={y0 + width * cell[1]} width={width} height={width}\n                                        stroke={this.props.borderColor}\n                                        fill={this.cellIsColored(cell) ? this.props.hiColor : this.props.loColor}>\n                                    </rect>\n                                    {/*<circle\n                                        cx={x0 + (width * cell[0] + width * (cell[0] + 1)) / 2}\n                                        cy={y0 + width * cell[1] + 65} r=\"3\" fill=\"red\" />*/}\n                                    <text textAnchor='middle'\n                                        x={x0 + (width * cell[0] + width * (cell[0] + 1)) / 2}\n                                        y={y0 + width * cell[1] + 65}\n                                        fontSize='50' \n                                        fill='black'>\n                                        {this.props.cellText[this.cellTextIndex(cell)].text}\n                                    </text>\n                                </g>\n                            )\n                        else\n                            return (\n                                <g key={index} onClick={this.onCellClick.bind(this, cell)} style={{cursor:this.props.onCellClick ? 'pointer' : 'auto'}}>\n                                    <rect key={index} x={x0 + width * cell[0]} y={y0 + width * cell[1]}\n                                        width={width} height={width} stroke={this.props.borderColor}\n                                        fill={this.cellIsColored(cell) ? this.props.hiColor : this.props.loColor}>\n                                    </rect>\n                                </g>\n                            );\n                    }, this)\n                }\n            </svg>\n        );\n    }\n});\n\n/**\n * The recall screen.\n * @prop sequence   array<point>\n * @prop onComplete callback\n */\nBoxSequence.Recall = React.createClass({\n    getInitialState: function() {\n        return {selects: this.props.sequence.map(function(){\n            return null;\n        })};\n    },\n    componentDidMount: function() {\n        this.startTime = new Date().getTime();\n    },\n    /**\n     * If the cell has been selected, return its index in this.state.selects;\n     * return -1 otherwise.\n     * @param cell array<integer>\n     */\n    getCellSelectIndex: function(cell) {\n        var s = this.state.selects;\n        for(var i = 0; i < s.length; i++)\n            if(s[i] && s[i][0] == cell[0] && s[i][0] == cell[0] && s[i][1] == cell[1])\n                return i;\n        return -1;\n    },\n    onCellClick: function(cell) {\n        var index = this.getCellSelectIndex(cell);\n        var selects = this.state.selects;\n\n        if(index == -1) {\n            for(var i = 0; i < selects.length; i++) {\n                if(selects[i] == null) {\n                    selects[i] = cell;\n                    this.setState({selects: selects});\n                    break;\n                }\n            }\n        }\n        else {\n            selects[index] = null;\n            this.setState({selects: selects});\n        }\n    },\n    onClear: function() {\n        for(var i = 0; i < this.state.selects.length; i++)\n            this.state.selects[i] = null;\n        this.setState({selects: this.state.selects});\n    },\n    onComplete: function() {\n        var endTime = new Date().getTime();\n        this.props.onComplete(this.state.selects, this.startTime, endTime);\n    },\n    render: function() {\n        //Make cell text\n        var cellText = this.state.selects.map(function(cell, index){\n            return {loc:cell, text:index + 1};\n        });\n\n        return (\n            <div>\n                <div className=\"row\" style={{marginBottom:20}}>\n                    <div className=\"col-xs-12\" style={{fontSize:20, textAlign:'center'}}>\n                        {translate('Please recall the order of the blue boxes')}\n                    </div>\n                </div>\n                <div className=\"row\" style={{marginBottom:25}}>\n                    <div className=\"col-md-6 col-md-offset-3 col-xs-8 col-xs-offset-2\">\n                        <BoxSequence.Slide.Figure rows={4} cols={4} cellText={cellText} onCellClick={this.onCellClick} />\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-xs-6\">\n                        <button className=\"btn btn-default pull-right\" onClick={this.onClear}>{translate('Clear')}</button>\n                    </div>\n                    <div className=\"col-xs-6\">\n                        <button className=\"btn btn-default pull-left\" onClick={this.onComplete}>{translate('Continue')}</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n});\n\n/**\n * The feedback screen.\n * @prop sequence array<point> The original problem sequence\n * @prop response object       The user's response with format\n *                             {res: array<point>, startTime: integer, endTime: integer}\n * @prop onComplete callback\n */\nBoxSequence.Feedback = React.createClass({\n    getCorrectCount: function() {\n        var res = 0;\n        var sequence = this.props.sequence;\n        var response = this.props.response.res;\n\n        for(var i = 0; i < sequence.length; i++)\n            if(response[i] && response[i][0] == sequence[i][0] && response[i][1] == sequence[i][1])\n                res++;\n        return res;\n    },\n    render: function() {\n        return (\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-xs-12\" style={{fontSize:25, marginBottom:25}}>\n                        {translate('You recalled')} {this.getCorrectCount()} {translate('out of')} {this.props.sequence.length} {translate('squares correctly')}.\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <button className=\"btn btn-default\" onClick={this.onComplete}>{translate('Continue')}</button>\n                </div>\n            </div>\n        )\n    },\n    onComplete: function() {\n        if(this.props.onComplete)\n            this.props.onComplete();\n    }\n});","/**\n * Dependencies\n *   - sq.js\n */\n\nvar SymmetryTest = React.createClass({\n    propTypes: {\n        probId: React.PropTypes.number,             //Problem id\n        questionId: React.PropTypes.number.isRequired, //Assessment question id\n        colored: React.PropTypes.array.isRequired,  //Array of points that specifies which box should be color-filled.\n        tra: React.PropTypes.object,                //Task running accuracy\n        feedback: React.PropTypes.bool,             //If feedback should be displayed\n        onComplete: React.PropTypes.func.isRequired, //Callback when this component is finished.\n        timeLimit: React.PropTypes.number.isRequired,\n    },\n    getInitialState: function() {\n        return {stage: 0};\n    },\n    componentDidMount: function() {\n        this.startTime = new Date().getTime();\n        this.timeLimit = setInterval(this.onSymmetryTimeUp, (this.props.timeLimit ? this.props.timeLimit : 8000));\n    },\n    onSymmetryTimeUp: function() {\n        clearInterval(this.timeLimit);\n        var endTime = new Date().getTime();\n        // console.log('time is up: ', endTime - this.startTime);\n        this.res = null;\n        this.time = endTime - this.startTime;\n\n        this.advance();\n    },\n    /**\n     * Handles the event when user click on true or false.\n     * @params res boolean The user's response\n     */\n    onRespond: function(res) {\n        clearInterval(this.timeLimit);\n        var endTime = new Date().getTime();\n        //console.log('submitted early: ', endTime - this.startTime);\n        this.res = res;\n        this.time = endTime - this.startTime;\n\n        this.adjustTra(res);\n        this.advance();\n    },\n    adjustTra: function(res) {\n        if(!this.props.tra)\n            return;\n        \n        this.tra = this.props.tra;\n\n        if(res == SY.isSymmetric(this.props.colored))\n            this.tra.correct++;\n        this.tra.total++;\n    },\n    advance: function() {\n        if(this.state.stage == 0 && this.props.feedback)\n            this.setState({stage: 1});\n        else {\n            this.onComplete();\n        }\n    },\n    onComplete:function() {\n        if (!this.tra)\n            this.tra = this.props.tra;\n        if(this.props.probId == undefined)\n            this.props.onComplete({response: this.res, time: this.time}, this.tra);\n        else\n            this.props.onComplete({probId: this.props.probId, questionId:this.props.questionId, response: this.res, time: this.time}, this.tra);\n\n\n    },\n    render: function(){\n        switch(this.state.stage) {\n            case 0:\n                return (\n                    <div>\n                        <div className=\"row\" style={{marginBottom:25}}>\n                            <div className=\"col-md-6 col-md-offset-3 col-xs-8 col-xs-offset-2\">\n                                <BoxSequence.Slide.Figure rows={8} cols={8} colored={this.props.colored} borderColor={'#000'} hiColor={'#000'} timeLimit={this.props.timeLimit} />\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-xs-6\">\n                                <button className=\"btn btn-default pull-right\" onClick={this.onRespond.bind(this, true)}>{translate('True')}</button>\n                            </div>\n                            <div className=\"col-xs=6\">\n                                <button className=\"btn btn-default pull-left\" onClick={this.onRespond.bind(this, false)}>{translate('False')}</button>\n                            </div>\n                        </div>\n                        {\n                            this.props.tra ? <SymmetryTest.Tra tra={this.props.tra} /> : null\n                        }\n                    </div>\n                )\n            case 1:\n                return (<SymmetryTest.Feedback colored={this.props.colored} res={this.res} onComplete={this.onComplete} />)\n        }\n    }\n});\n\n/*\n * @prop tra object Task Running Accuracy\n */\nSymmetryTest.Tra = React.createClass({\n    render: function() {\n        return null;\n        // return (\n        //     <div style={{position:'fixed', bottom:20, left:0, width:'100%', textAlign:'center'}}>\n        //         <b>Symmetry Accuracy</b> <br/> Correct: {this.props.tra.correct} | Incorrect: {this.props.tra.total - this.props.tra.correct} | Total: {this.props.tra.total}\n        //     </div>\n        // );\n    }\n});\n\n/**\n * @prop colored array<point>\n * @prop res     object with the format {res: boolean, startTime: integer, endTime: integer}\n * @prop onComplete callback\n */\nSymmetryTest.Feedback = React.createClass({\n    propTypes: {\n        colored: React.PropTypes.array.isRequired,\n        res: React.PropTypes.bool.isRequired,\n        onComplete: React.PropTypes.func.isRequired\n    },\n    onComplete: function() {\n        if(this.props.onComplete)\n            this.props.onComplete();\n    },\n    render: function() {\n        return (\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-xs-12\" style={{fontSize:25, marginBottom:25}}>\n                        {translate('Your answer is')} {SY.isSymmetric(this.props.colored) == this.props.res ? translate('correct') : translate('incorrect')}.\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <button className=\"btn btn-default\" onClick={this.onComplete}>{translate('Continue')}</button>\n                </div>\n            </div>\n        )\n    }\n});","/**\n * Dependencies\n *   - sq.js\n *   - sy.js\n */\n\n/**\n * A symmetry square sequence recall problem.\n *\n * @prop problem    object   The problem with format {type:string, sequence:array<point>, syms:array<figure>}\n * @prop tra        object   Task Running Accuracy.\n * @prop traLow     number   Lower threshold for TRA. If the TRA is below this, the task is stopped. Default 90%\n * @prop feedback   boolean\n * @prop onComplete callback\n */\nvar SymmetryBoxSequence = React.createClass({\n    propTypes: {\n        problem: React.PropTypes.object.isRequired,\n        questionId: React.PropTypes.number.isRequired,\n        tra: React.PropTypes.object,\n        traLow: React.PropTypes.number,\n        feedback: React.PropTypes.bool,\n        timeLimit: React.PropTypes.number.isRequired,\n        onComplete: React.PropTypes.func.isRequired\n    },\n    getDefaultProps: function() {\n        return {\n            traLow: 0.9\n        };\n    },\n    getInitialState: function() {\n        return {stage: 0};\n    },\n    advance: function() {\n        if(this.state.stage < 1 || (this.state.stage == 1 && this.props.feedback))\n            this.setState({stage: this.state.stage + 1});\n        else if(this.props.onComplete)\n            this.props.onComplete({probId: this.props.problem.id, questionId: this.props.questionId, squares: {response: this.recallRes.selects, time: this.recallRes.endTime - this.recallRes.startTime}, symmetries: this.symRes}, this.tra);\n    },\n    /**\n     * When sequence component is completed.\n     * @param symRes array<object> An array of object of user responses to symmetry problems.\n     */\n    onSequenceComplete: function(symRes, tra) {\n        this.symRes = symRes;\n        this.tra = tra;\n        this.advance();\n    },\n    /**\n     * Handles the event after recall has finished.\n     * @prarm selects   array<point>  User selection sequences, each of which is a location [x, y]\n     * @param startTime integer       See getTime() of date object.\n     * @param endTime   integer       See getTime() of date object.\n     */\n    onSubmitRecall: function(selects, startTime, endTime) {\n        //Save the recall result\n        this.recallRes = {selects: selects, startTime: startTime, endTime: endTime};\n        this.advance();\n    },\n    render: function() {\n        switch(this.state.stage) {\n            case 0:\n                return (\n                    <SymmetryBoxSequence.Sequence problem={this.props.problem} tra={this.props.tra} traLow={this.props.traLow} timeLimit={this.props.timeLimit} onComplete={this.onSequenceComplete} />\n                );\n            case 1:\n                return <BoxSequence.Recall sequence={this.props.problem.squares} onComplete={this.onSubmitRecall} />\n            case 2:\n                return (\n                    <SymmetryBoxSequence.Feedback problem={this.props.problem} symRes={this.symRes}\n                        recallRes={this.recallRes} onComplete={this.advance} />\n                );\n        }   \n    }\n});\n\n/**\n * Displays a sequence of alternating symmetry and square locations.\n *\n * @prop problem    object   An object with fields {type, squares, symmetries}.\n * @prop tra        object\n * @prop traLow     number   Lower threshold for TRA. If the TRA is below this, the task is stopped. Default 90%\n * @prop onComplete callback\n */\nSymmetryBoxSequence.Sequence = React.createClass({\n    getInitialState: function() {\n        this.symRes = [];\n        return {\n            count: 0,\n            showLowTra: false,\n            showedLowTra: false,\n            showTimeout: false,\n            showedTimeout: false,\n        };\n    },\n    onBoxSlideComplete: function() {\n        //clearInterval(this.timer);\n        this.advance();\n    },\n    /**\n     * @param res object Response {res: boolean, startTime: integer, endTime: integer}\n     */\n    onSymmetrySubmit: function(res, tra) {\n        this.symRes.push(res);\n        this.tra = tra;\n        //console.log('response', res.response);\n\n        if (res.response == null && this.state.showedTimeout == false)\n            return this.setState({showTimeout:true, showedTimeout:true});\n\n        if(this.props.tra && tra.total != 0 && tra.total > 2 &&\n            !this.state.showedLowTra &&\n            res.response !== SY.isSymmetric(this.props.problem.symmetries[Math.floor(this.state.count / 2)]) &&\n            tra.correct / tra.total < this.props.traLow)\n            return this.setState({showLowTra:true, showedLowTra: true});\n\n        this.advance();\n    },\n    onLowTraComplete: function() {\n        this.state.showLowTra = false;\n        this.advance();\n    },\n    onTimeoutComplete: function() {\n        this.state.showTimeout = false;\n        this.state.showedTimeout = false;\n        this.advance();\n    },\n    advance: function() {\n        if(this.state.count < (this.props.problem.squares.length * 2 - 1)) {\n            this.setState({count: this.state.count + 1});\n        }\n        else\n            this.props.onComplete(this.symRes, this.tra);\n    },\n    render: function() {\n        if(this.state.showLowTra)\n            return <LowTra type={'symmetry'} traLow={this.props.traLow} onComplete={this.onLowTraComplete} />\n\n        if(this.state.showTimeout)\n            return <Timeout type={'symmetry'} onComplete={this.onTimeoutComplete}/>\n\n        if(this.state.count % 2 == 0) {\n            return (\n                <SymmetryTest key={this.state.count}\n                    colored={this.props.problem.symmetries[Math.floor(this.state.count / 2)]}\n                    tra={this.props.tra}\n                    timeLimit={this.props.timeLimit}\n                    onComplete={this.onSymmetrySubmit} />\n            );\n        }\n        else {\n            return (\n                <BoxSequence.Slide key={this.state.count}\n                colored={[this.props.problem.squares[Math.floor(this.state.count / 2)]]}\n                onComplete={this.onBoxSlideComplete} />\n            );\n        }\n    }\n});\n\n/**\n * @prop problem    The original problem.\n * @prop symRes     Symmetry problem responses from the user.\n * @prop recallRes  Sequence recall response from the user.\n * @prop onComplete callback\n */\nSymmetryBoxSequence.Feedback = React.createClass({\n    getSymmetryCorrectCount: function() {\n        var res = 0;\n        for(var i = 0; i < this.props.problem.symmetries.length; i++) {\n            if(this.props.symRes[i].response == SY.isSymmetric(this.props.problem.symmetries[i]))\n                res++;\n        }\n        return res;\n    },\n    getBoxesCorrectCount: function() {\n        var res = 0;\n\n        for(var i = 0; i < this.props.problem.squares.length; i++) {\n            if(this.props.recallRes.selects[i] && \n                this.props.recallRes.selects[i][0] == this.props.problem.squares[i][0] &&\n                this.props.recallRes.selects[i][1] == this.props.problem.squares[i][1])\n                res++;\n        }\n        return res;\n    },\n    complete: function() {\n        this.props.onComplete();\n    },\n    render: function() {\n        var mc = this.getSymmetryCorrectCount();\n        var lc = this.getBoxesCorrectCount();\n        var ml = this.props.problem.symmetries.length; //Math problem length\n        var ll = this.props.problem.squares.length;  //Letters length\n\n        return (\n            <div style={{fontSize:22}}>\n                <div className=\"row\" style={{marginBottom:20}}>\n                    <div className=\"col-xs-12\">\n                        {translate('You recalled')} {lc} {translate('out of')} {ll} {translate('squares correctly')}.\n                    </div>\n                </div>\n                <div className=\"row\" style={{marginBottom:25}}>\n                    <div className=\"col-xs-12\">\n                        {translate('You answered')} {mc} {translate('out of')} {ml} {translate('symmetry figure questions correctly')}.\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-xs-12\">\n                        <button className=\"btn btn-default\" onClick={this.complete}>{translate('Continue')}</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n});","var Runner = React.createClass({\n    propTypes: {\n        taskId: React.PropTypes.number.isRequired,\n        task: React.PropTypes.object.isRequired,\n        assignmentId: React.PropTypes.number.isRequired,\n        preview: React.PropTypes.bool.isRequired\n    },\n    getInitialState: function() {\n        return {\n            progress: 1,\n            practiceComplete: false,\n            practiceTimes: [],\n            standardDeviation: 150,\n            deviationMultiplier: 2.5,\n            blockTimeLimit: 8000,\n        };\n    },\n    addPracticeTime: function(time) {\n        this.state.practiceTimes.push(time);\n    },\n    setBlockTimeLimit: function(averageResponseTime) {\n        var newLimit = averageResponseTime + (this.state.standardDeviation * this.state.deviationMultiplier);\n        if (newLimit < 3000)\n            newLimit = 3000;\n        this.setState({blockTimeLimit: newLimit});\n        //console.log('new time limit: ', newLimit);\n    },\n    endPracticePhase: function() {\n        this.state.practiceComplete = true;\n\n        // Calculate time averages\n        var total = 0;\n        var length = this.state.practiceTimes.length;\n        for (var i = 0; i < length; i++)\n            total = total + this.state.practiceTimes[i];\n        var averageTime = total / length;\n        this.setBlockTimeLimit(averageTime);\n    },\n    checkIfPractice: function() {\n        if (this.state.practiceComplete)\n            return false;\n\n        return true;\n    },\n    onPartInfoComplete: function(workerId, qualId) {\n        this.state.workerId = workerId;\n        this.state.qualId = qualId;\n        this.advance();\n    },\n    onTaskComplete: function(res) {\n        this.advance();\n\n        //Short problem blocks\n        for(var i = 0; i < this.props.task.blocks.length; i++)\n            this.props.task.blocks[i].problems.sort(function(a, b){return (a.id - b.id)});\n\n        if (this.props.preview == false)\n        {\n            // If we are taking a sample test, submit differently\n            if (this.props.assignmentId == 123456789)\n            {\n                var url = window.location.href;\n                var n1 = url.search(\"sample/\") + 7;\n                var n2 = url.search(\"/take\");\n                var name = url.substring(n1, n2);\n                var path = '/assessment/sample/'+name+'/complete';\n                var method = \"post\";\n                var form = document.createElement(\"form\");\n                console.log(url, name, path, method);\n                form.setAttribute(\"method\", method);\n                form.setAttribute(\"action\", path);\n                var token = jQuery('meta[name=\"csrf_token\"]').attr('content');\n                var params = {_token: token};\n\n                for(var key in params) {\n                    if(params.hasOwnProperty(key)) {\n                        var hiddenField = document.createElement(\"input\");\n                        hiddenField.setAttribute(\"type\", \"hidden\");\n                        hiddenField.setAttribute(\"name\", key);\n                        hiddenField.setAttribute(\"value\", params[key]);\n\n                        form.appendChild(hiddenField);\n                    }\n                }\n\n                document.body.appendChild(form);\n                form.submit();\n            }\n\n            // This is an actual test\n            else\n            {\n                $.ajax({\n                    type: 'POST',\n                    url: saveUrl,\n                    data: {\n                        // taskId: this.props.taskId,\n                        // workerId: this.state.workerId,\n                        // qualId: this.state.qualId,\n                        assignmentId: this.props.assignmentId,\n                        preview: this.props.preview,\n                        json: JSON.stringify(res),\n                        // score: TSK.getScore(this.props.task, res)\n                    },\n                    context: this,\n                    success: function(data, textStatus, jqXHR) {\n\n                        // Or an error occurred\n                        if (data['success'] != true)\n                        {\n                            console.log('something is not right');\n                            var output = document.createElement(\"pre\");\n                            output.innerHTML = data;\n                            document.body.insertBefore(output, document.body.firstChild);\n                            this.setState({\n                                progress: 5,\n                                message: \"Something went wrong. Please contact the test administrator.\"\n                            });\n                        }\n\n                        // Actual assessment, complete it\n                        else\n                        {\n                            console.log('task completed');\n                            var submitButton = document.getElementById('complete');\n                            submitButton.click();\n                            this.setState({\n                                progress: 5,\n                                message: \"Assessment completed! Please wait while we submit your responses.\"\n                            });\n                        }\n                    },\n                    error: function(data, jqXHR, textStatus, errorThrown) {\n                        console.log(data);\n                        var output = document.createElement(\"pre\");\n                        output.innerHTML = data.responseText;\n                        document.body.insertBefore(output, document.body.firstChild);\n                        console.log('Ajax save error', textStatus, errorThrown);\n                        this.setState({progress: 4});\n                    }\n                });\n            }\n        }\n\n        else\n        {\n            this.setState({\n                progress: 5,\n                message: \"Assessment completed! Because this is a preview, responses have not been saved.\"\n            });\n        }\n    },\n    advance: function() {\n        if(this.state.progress < 3)\n            this.setState({progress: this.state.progress + 1});\n    },\n    render:function(){\n        switch(this.state.progress) {\n            case 0: //Participant ID screen\n                return <PartInfoForm onComplete={this.onPartInfoComplete}/>\n            case 1: //The task\n                return <Runner.Task task={this.props.task} onComplete={this.onTaskComplete} pushTime={this.addPracticeTime} onEndPractice={this.endPracticePhase} onCheckPractice={this.checkIfPractice} blockTimeLimit={this.state.blockTimeLimit} />\n            case 2:\n                return <Runner.SavingResult/>\n            case 3:\n                return <Runner.SaveResultSuccess workerId={this.state.workerId} qualId={this.state.qualId} respId={this.state.respId}/>\n            case 4:\n                return <Runner.SaveResultError/>\n            case 5:\n                return <Runner.ShowData message={this.state.message} data={this.state.data}/>\n        }\n    }\n});\n\nRunner.Task = React.createClass({\n    propTypes: {\n        task: React.PropTypes.object.isRequired,\n        onComplete: React.PropTypes.func.isRequired,\n        onEndPractice: React.PropTypes.func.isRequired,\n        pushTime: React.PropTypes.func.isRequired,\n        onCheckPractice: React.PropTypes.func.isRequired,\n        blockTimeLimit: React.PropTypes.number.isRequired,\n    },\n    getInitialState: function() {\n        this.tra = {correct: 0, total: 0};\n        this.res = [];\n\n        return {i: 0};\n    },\n    onBlockComplete: function(res, tra) {\n        var entry = this.props.task.struct[this.state.i];\n        var block = this.props.task.blocks[entry.id];\n        var practice = block.practice;\n        var questionType = block.problems[0].type;\n\n        // If math/letters or symmetry/squares, record the time it takes to do the practice question\n        // Use this time for all other math and symmetry questions\n        if (practice)\n        {\n            if (questionType == 'eqls')\n            {\n                for (var j = 0; j < res[0].equations.length; j++)\n                {\n                    var equation = res[0].equations[j];\n                    var time = equation.time;\n                    this.props.pushTime(time);\n                }\n            }\n            if (questionType == 'sysq')\n            {\n                for (var j = 0; j < res[0].symmetries.length; j++)\n                {\n                    var symmetry = res[0].symmetries[j];\n                    var time = symmetry.time;\n                    this.props.pushTime(time);\n                }\n            }\n        }\n\n        // If we're still practicing, check if we're about to end\n        if (this.props.onCheckPractice())\n        {\n            var nextEntry = this.props.task.struct[this.state.i];\n            for (var k = 0; k < this.props.task.struct.length; k++)\n            {\n                nextEntry = this.props.task.struct[this.state.i + 1 + k];\n                if (nextEntry && nextEntry.type == \"block\")\n                    break;\n            }\n            block = this.props.task.blocks[nextEntry.id];\n            practice = block.practice;\n            if (! practice)\n                this.props.onEndPractice();\n        }\n\n        this.res.push(res);\n        this.advance();\n    },\n    advance: function() {\n        if(this.state.i == this.props.task.struct.length - 1) {\n            this.props.onComplete(this.res);\n        }\n        else {\n            this.setState({i: this.state.i + 1});\n        }\n    },\n    getCompToRender: function() {\n        if(this.props.task.struct[this.state.i].type == 'block')\n            return this.getBlockToRender();\n        else\n            return this.getInstToRender();\n    },\n    /**\n     * Returns a Block component to be rendered.\n     */\n    getBlockToRender: function() {\n        var entry = this.props.task.struct[this.state.i];\n        var block = this.props.task.blocks[entry.id];\n        return  <Block key={this.state.i} block={block.problems} tra={block.practice ? {correct: 0, total: 0} : this.tra} randomize={true} practice={block.practice} timeLimit={this.props.blockTimeLimit} onComplete={this.onBlockComplete} />\n    },\n    /**\n     * Returns an Instruction component to be rendered.\n     */\n    getInstToRender: function() {\n        var entry = this.props.task.struct[this.state.i];\n        var inst = this.props.task.instructs[entry.id];\n        return <Instruction key={this.state.i} text={inst.text} nextBtnLabel={inst.next} onComplete={this.advance}/>\n    },\n    render: function() {\n        return this.getCompToRender();\n    }\n});\n\nRunner.SavingResult = React.createClass({\n    render: function() {\n        return <div style={{fontSize:25}}>You have completed the task. Please wait while we are submitting your responses.</div>\n    }\n});\n\nRunner.SaveResultSuccess = React.createClass({\n    propTypes: {\n        workerId: React.PropTypes.string.isRequired,\n        qualId: React.PropTypes.number.isRequired,\n        respId: React.PropTypes.number.isRequired\n    },\n    render: function() {\n        return (\n            <div style={{fontSize:25}}>\n                <p>Your responses have been submitted with confirmation code <b>{this.props.workerId + '-' + this.props.qualId + '-' + this.props.respId}</b></p>\n                <p>You may now close this survey. Thank you.</p>\n            </div>\n        )\n    }\n});\n\nRunner.SaveResultError = React.createClass({\n    render: function() {\n        return <div style={{fontSize:25}}>There was an error submitting your responses. Please contact the coordinator of this experiment.</div>\n    }\n});\n\nRunner.ShowData = React.createClass({\n    propTypes: {\n        message: React.PropTypes.string.isRequired,\n    },\n    render: function() {\n        return <div style={{fontSize:25}}>{this.props.message}</div>\n    }\n});"]}