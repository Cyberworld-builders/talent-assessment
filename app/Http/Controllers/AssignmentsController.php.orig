<?php

namespace App\Http\Controllers;

use App\Client;
use App\Job;
use App\Mailer;
use App\Question;
use App\Translation;
use App\User;
use App\Answer;
use App\Assessment;
use App\Assignment;
use Bican\Roles\Models\Role;
use Carbon\Carbon;
use Illuminate\Contracts\View\Factory;
use Illuminate\Http\Request;
use App\Http\Requests;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Session;
use Illuminate\View\View;
use Illuminate\Support\Facades\Validator;
use Maatwebsite\Excel\Facades\Excel;

class AssignmentsController extends Controller {

    /**
     * Display a listing of assignments for the currently authenticated user.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $user = \Auth::user();
        $assignments = $user->assignments;
        $client = $user->client;

        if ($user->level() > 1)
            return view('dashboard.assignments.index', compact('user', 'assignments'));

        if (! $user->completed_profile)
            return redirect('/profile');

        return view('assignment.index', compact('user', 'assignments'));
    }

    /**
     * Show the form for creating a new assignment.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        // return a view here for creating an assignment
    }

    /**
     * Store a newly created assignment in storage.
     *
     * @param  \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        // return a view here for storing an assignment
    }

	/**
     * Assignments view for clients.
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector|View
     */
    public function assignments($id)
    {
		$client = Client::findOrFail($id);
        $users = $client->users;

        $userIds = [];
        foreach ($users as $user)
            array_push($userIds, $user->id);

        $assignments = Assignment::all()->filter(function($assignment) use ($userIds) {
            return in_array($assignment->user_id, $userIds);
        });

        return view('dashboard.clients.assignments', compact('client', 'assignments', 'report'));
    }



    /**
     * Store answer responses for a specific assignment in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store_answers($id, Request $request)
    {
        $assignment = Assignment::findOrFail($id);
        $assessment = Assessment::findOrFail($assignment->assessment_id);
        $data = $request->all();
        $complete = $data['complete'];

        // Safety check to make sure we're still on the same assignment
        if (! \Auth::user()->owns($assignment))
            return \Response::json(['errors' => 'Assignment not assigned to this user']);

        // Complete assignment if done
        if ($complete && $this->complete($id)) {
            return \Response::json(['success' => true, 'reload' => true]);
        }

        // Check if assignment isn't complete yet
        if ($assignment->completed)
            return \Response::json(['errors' => 'This assignment has already been completed']);

        $valid_ids = $assessment->get_existing_question_ids();
        $question_id = $data['question_id'];
        $value = $data['value'];

        // If question id isn't valid, ignore this answer
        if (! in_array($question_id, $valid_ids))
            return \Response::json(['errors' => 'Question ID not valid']);

        $this->update_answer($assignment, $question_id, $value);

        return \Response::json(['success' => true]);
    }

	public function wm_save(Request $request)
	{
		$data = $request->all();
		$assignment = Assignment::findOrFail($data['assignmentId']);
		$assessment = Assessment::findOrFail($assignment->assessment_id);
		$valid_ids = $assessment->get_existing_question_ids();
		$problems = json_decode($data['json']);

		foreach ($problems as $problemArray)
		{
			$problem = $problemArray[0];

			// If question id isn't valid, ignore this answer
			if (! in_array($problem->questionId, $valid_ids))
				continue;

			// Get question type
			$question = Question::find($problem->questionId);
			$slug = $question->getTypeSlug();

			// Letter sequence value
			if ($slug == 'ls')
				$value = serialize(['response' => $problem->response, 'options' => $problem->options]);

			// Math equation
			if ($slug == 'eq')
				$value = $problem->response;

			// Math and letters value
			if ($slug == 'eqls')
			{
				$value = [
					'letters' => ['options' => $problem->letters->options, 'response' => $problem->letters->response, 'time' => $problem->letters->time],
					'equations' => []
				];

				foreach ($problem->equations as $equation)
					array_push($value['equations'], ['response' => $equation->response, 'time' => $equation->time]);

				$value = serialize($value);
			}

			// Square sequence value
			if ($slug == 'sq')
				$value = serialize($problem->response);

			// Symmetry value
			if ($slug == 'sy')
				$value = $problem->response;

			// Symmetry squares value
			if ($slug == 'sysq') {
				$value = [
					'squares' => ['response' => $problem->squares->response, 'time' => $problem->squares->time],
					'symmetries' => []
				];

				foreach ($problem->symmetries as $symmetry)
					array_push($value['symmetries'], ['response' => $symmetry->response, 'time' => $symmetry->time]);

				$value = serialize($value);
			}

			// Set the response time
			$time = null;
			if (property_exists($problem, 'time'))
				$time = $problem->time;

			// Save our answer
			$this->update_answer($assignment, $problem->questionId, $value, $time);
		}

		// If preview
		if (json_decode($data['preview']))
			dd($assignment->answers->toArray());


		return \Response::json([
			'success' => true,
		]);
    }

	/**
     * Complete the specified assignment.
     *
     * @param $id
     * @return bool
     */
    public function complete($id)
    {
        $assignment = Assignment::findOrFail($id);

        $assignment->completed = 1;
        $assignment->completed_at = Carbon::now();
        $assignment->save();

        $this->send_completion_notification_to_user($id);

        return true;
    }

	/**
     * Show the form for assigning assessments to users.
     *
     * @return View
     */
    public function assign()
    {
        $clients = Client::all();
        $assessments = Assessment::all();

        if (\Auth::user()->is('client'))
        {
            $assessments = '';
            if (\Auth::user()->client->assessments)
            {
                $assessments = Assessment::all()->filter(function ($assessment) {
                    return in_array($assessment->id, \Auth::user()->client->assessments);
                });
            }
        }

        $assessmentsArray = [];
        if ($assessments)
        {
            foreach ($assessments as $assessment)
                $assessmentsArray[$assessment->id] = $assessment->name;
        }

        $clientsArray = [null => '---'];
        foreach ($clients as $client)
            $clientsArray[$client->id] = $client->name.' ('.$client->users->count().' users)';

        $usersArray = [];
        foreach (User::all() as $user)
            $usersArray[$user->id] = $user->name . ' (' . $user->username . ', ' . $user->email . ')';

        return view('dashboard.assignments.assign', compact('assessmentsArray', 'clientsArray', 'custom_fields', 'usersArray'));
    }

	/**
	 * Show the form for assigning assessments to users.
	 *
	 * @return View
	 */
	public function assignToClient($id)
	{
		$client = Client::findOrFail($id);
		$usersArray = User::getSelectFormattedArrayForClient($id);
		$assessmentsArray = get_select_formatted_array(Assessment::all());
		$emailBody = get_default_email_body();

		return view('dashboard.assignments.assignToClient', compact('client', 'usersArray', 'assessmentsArray', 'emailBody'));
	}

	/**
	 * Assign an assessment to a user.
	 *
	 * @param Request $request
	 * @return bool|\Illuminate\Http\RedirectResponse
	 */
	public function assignAssessment(Request $request)
	{
		$data = $request->all();
		$expiration = $data['expiration'];

		if (! $data['user'])
			return false;

		if (! $data['email-subject'])
			$data['email-subject'] = 'New assessments have been assigned to you';

		// If whitelabel option is not present, such as when client admin is assigning
		if (! key_exists('whitelabel', $data))
		{
			// If it's a client admin, set it to their whitelabel preferences
			if (\Auth::user()->is('client'))
				$data['whitelabel'] = \Auth::user()->client->whitelabel;

			// Otherwise, don't whitelabel
			else
				$data['whitelabel'] = 0;
		}

		// Sanitize the user data input (by default it's catching the template user as well)
		foreach ($data['user'] as $i => $userId)
			if ($userId == 0)
			{
				unset($data['user'][$i]);
				unset($data['target'][$i]);
				unset($data['role'][$i]);
			}

		$validator = Validator::make($data, [
			'assessments' => 'required',
			'user' => 'required',
		]);

		if ($validator->fails())
			return redirect()->back()->withInput()->withErrors($validator->errors());

		// Find all the users we are assigning to
		$group = [];
		foreach ($data['user'] as $i => $userId)
		{
			$user = User::find($userId);
			if ($user)
				array_push($group, $user);
		}

		// Generate assignments for each user, per assessment
		foreach ($group as $i => $user)
		{
			$assignment_ids = [];
			foreach ($data['assessments'] as $assessment_id)
			{
				$assessment = Assessment::find($assessment_id);

				// Target another User as the subject
				if ($assessment->target == 1 or $assessment->target == 2)
				{
					// If target not assigned, ignore
					if (! $data['target'][$i])
						continue;

					$target = User::find($data['target'][$i]);
					$role = $data['role'][$i];
					$custom_fields = [
						'type' => ['name', 'email', 'role'],
						'value' => [$target->name, $target->email, $role],
					];

					// Generate assignment for user
					$assignment_id = $this->generate_assignment_for_user($assessment->id, $user, $expiration, $data['whitelabel'], $custom_fields, $target->id);
					array_push($assignment_ids, $assignment_id);
				}

				// Regular assignment without custom fields
				else
				{
					// Generate assignment for user
					$assignment_id = $this->generate_assignment_for_user($assessment->id, $user, $expiration, $data['whitelabel'], 0, 0, $user->id);
					array_push($assignment_ids, $assignment_id);
				}
			}

			// Email assignment links to the user
			if ($data['send-email'])
			{
				$this->send_assignment_link_to_user($user, $assignment_ids, $expiration, $data['email-subject'], $data['email-body']);
			}
		}

		// Generate string message of assigned assessments
		$assessments_string = '';
		foreach ($data['assessments'] as $assessment_id) {
			$assessment = Assessment::findOrFail($assessment_id);
			$assessments_string .= ', ' . $assessment->name;
		}

		return redirect()->back()->with('success', ($i + 1).' users have been assigned '.count($data['assessments']).' assessments'.$assessments_string);
	}

	/**
     * Assign an assessment to a user.
     *
     * @param Request $request
     * @return bool|\Illuminate\Http\RedirectResponse
     */
    public function assign_assessment2(Request $request)
    {
		$data = $request->all();
		$expiration = $data['expiration'];

		if (! $data['user'])
			return false;

		if (! $data['assessments'])
			return false;

		if (! array_key_exists('whitelabel', $data))
			$data['whitelabel'] = 0;

		if (! $data['email-subject'])
			$data['email-subject'] = 'New assessments have been assigned to you';

		// Find all the users we are assigning to
		$group = [];
		foreach ($data['user'] as $i => $userId)
		{
			$user = User::find($userId);
			if ($user)
				array_push($group, $user);
		}

		// Generate assignments for each user, per assessment
		foreach ($group as $i => $user)
		{
			$assignment_ids = [];
			foreach ($data['assessments'] as $assessment_id)
			{
				$assessment = Assessment::find($assessment_id);

				// Target another User as the subject
				if ($assessment->target == 1 or $assessment->target == 2)
				{
					// If target not assigned, ignore
					if (! $data['target'][$i])
						continue;

					$target = User::find($data['target'][$i]);
					$role = $data['role'][$i];
					$custom_fields = [
						'type' => ['name', 'email', 'role'],
						'value' => [$target->name, $target->email, $role],
					];

					// Generate assignment for user
					$assignment_id = $this->generate_assignment_for_user($assessment->id, $user, $expiration, $data['whitelabel'], $custom_fields, $target->id);
					array_push($assignment_ids, $assignment_id);
				}

				// Regular assignment without custom fields
				else
				{
					// Generate assignment for user
					$assignment_id = $this->generate_assignment_for_user($assessment->id, $user, $expiration, $data['whitelabel'], 0, 0, $user->id);
					array_push($assignment_ids, $assignment_id);
				}
			}

			// Email assignment links to the user
			if ($data['send-email'])
			{
				$this->send_assignment_link_to_user($user, $assignment_ids, $expiration, $data['email-subject'], $data['email-body']);
			}
		}

		// Generate string message of assigned assessments
		$assessments_string = '';
		foreach ($data['assessments'] as $assessment_id) {
			$assessment = Assessment::findOrFail($assessment_id);
			$assessments_string .= ', ' . $assessment->name;
		}

		return redirect()->back()->with('success', ($i + 1).' users have been assigned '.count($data['assessments']).' assessments'.$assessments_string);
    }

	/**
     * Display the landing page for the assignment the user is about to take.
     *
     * @param Assignment $id
     * @return Factory|View
     */
    public function stage($id)
    {
        $user = \Auth::user();
        $assignment = Assignment::findOrFail($id);
        $assessment = Assessment::findOrFail($assignment->assessment_id);
		$task = null;

        return view('assignment.stage', compact('user', 'assignment', 'assessment', 'task'));
    }

    /**
     * Display the specified assignment.
     *
     * @param  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $assignment = Assignment::findOrFail($id);
        $user = User::findOrFail($assignment->user_id);
		$translation = Translation::where('assessment_id', $assignment->assessment()->id)->where('language_id', $user->language_id)->first();
        //$expires = Carbon::createFromFormat('Y-m-d H:i:s', base64_decode($_GET['e']));

        // Check if the link token is valid
        // !! Link checking should be done through the dashboard controller
        if (! Assignment::checkURL($id))
            abort(403, 'Invalid session token');

        // Check if the link is already expired
        if ($assignment->expires < Carbon::now())
            abort(403, 'Link expired'); // This should be a view probably

        // Try to authenticate with the user
        if (! \Auth::loginUsingId($user->id))
            abort(403, 'Invalid user');

        // Safety check to make sure we're on the right assignment
        if (! $user->owns($assignment))
            abort(403, 'Not allowed to access this assignment');

        // Check if assignment is already completed
        if ($assignment->completed)
            return view('assignment.complete');

        // Find the assessment
        $assessment = Assessment::findOrFail($assignment->assessment_id);

        // Show paginated results if necessary
        if ($assessment->paginate) {
            $questions = $assessment->questions()->orderBy('number', 'asc')->simplePaginate($assessment->items_per_page);
            $questions->appends(['u' => $_GET['u'], 'e' => $_GET['e'], 't' => $_GET['t']])->render();
        }

        // Otherwise, show regular results
        else {
            $questions = $assessment->questions()->orderBy('number', 'asc')->get();
        }

        // Store when the assignment was started
        if (! $assignment->started_at)
        {
            $assignment->started_at = Carbon::now();
            $assignment->save();
        }

        // Send along the client for white-labeling the assignment
        $client = $user->client;

		// Get all WM specific questions
		$wmQuestions = $assessment->questions()->orderBy('number', 'asc')->get()->filter(function($question) {
			return $question->isWMType();
		});
		$task = null;
		$assessmentsController = new AssessmentsController();
		if ($wmQuestions and !$wmQuestions->isEmpty())
			$task = $assessmentsController->createWMTask($wmQuestions, $translation);

        return view('assignment.show', compact('id', 'assessment', 'questions', 'assignment', 'user', 'task'));
    }

    /**
     * Show all assignments for a specific user.
     *
     * @param $user_id
     * @return View
     */
    public function show_assignments_for_user($user_id)
    {
        $user = User::findOrFail($user_id);
        $assignments = $user->assignments;

        return view('dashboard.assignments.index', compact('user', 'assignments'));
    }




    /**
     * Show assignment details for a specific assignment.
     *
     * @param $assignment_id
     * @return View
     */
    public function show_assignment_details($assignment_id)
    {
        $assignment = Assignment::findOrFail($assignment_id);
        $assessment = Assessment::findOrFail($assignment->assessment_id);
        $answers = $assignment->answers;
        $questions = $assessment->questions()->orderBy('number', 'asc')->get();
        $user = User::findOrFail($assignment->user_id);

        return view('dashboard.assignments.show', compact('assessment', 'questions', 'answers', 'user', 'assignment'));
    }

    public function edit_assignment_details($assignment_id,Request $request)
    {
        $data = $request->all();
        $assignment = Assignment::findOrFail($assignment_id);
        $assessment = Assessment::findOrFail($assignment->assessment_id);
        $answers = $assignment->answers;
        $questions = $assessment->questions;
        $user = User::findOrFail($assignment->user_id);
        $expires = date('D, d M Y',strtotime($assignment->expires));
        if (count($data) > 0)
        {
			$expiration = $data['expiration'];
			$whitelabel = $data['whitelabel'];
			$this->update_assignment_for_user($assignment_id,$user,$expiration,$whitelabel);
		    $assignment = Assignment::findOrFail($assignment_id);
		    $expires = date('D, d M Y',strtotime($assignment->expires));
		}
        return view('dashboard.assignments.edit_assignment', compact('assessment', 'questions', 'answers', 'user', 'assignment','expires'));
    }

public function update_assignment_for_user($assignment_id, $user, $expiration, $whitelabel)
    {

        $expires = Carbon::createFromFormat('D, d M Y', $expiration);

        $assignment = Assignment::findOrFail($assignment_id);
        $assignment->update([
            'expires' => $expires,
            'whitelabel' => $whitelabel
        ]);

      return $assignment->id;
    }

	/**
     * Download assignment data to excel.
     *
     * @param int Assignment $id
     * @return View
     */
    public function download_assignment($id)
    {
        $assignment = Assignment::findOrFail($id);
        $assessment = Assessment::findOrFail($assignment->assessment_id);
        $answers = $assignment->answers;
        $user = User::findOrFail($assignment->user_id);

        $questions = $assessment->filteredQuestions();
//        foreach ($questions as $question)
//        {
//            if (! $question->dimension())
//            {
//                $question->dimension_code = $question->number;
//                continue;
//            }
//
//            $question->dimension_code = '';
//
//            if ($question->dimension()->parent_exists())
//                $question->dimension_code .= $question->dimension()->getParent()->code;
//
//            $question->dimension_code .= $question->dimension()->code;
//            $question->dimension_code .= $question->number;
//        }

        $filename = $assessment->name.' for '.$user->name.' '.$assignment->completed_at;

        $data = Excel::create($filename, function($excel) use ($assessment, $questions, $answers, $user, $assignment)
        {
            $excel->setTitle($assessment->name.' Details');
            $excel->sheet('Details', function($sheet) use ($assessment, $questions, $answers, $user, $assignment) {
                $sheet->loadView('excel.assignments.show', compact('assessment', 'questions', 'answers', 'user', 'assignment'));
            });
        });

        $data->store('csv')->export('csv');

        //return view('excel.assignments.show', compact('assessment', 'questions', 'answers', 'user', 'assignment'));
    }

    /**
     * Show the form for editing the specified assignment.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
		$assignment = Assignment::findOrFail($id);
		$assessment = Assessment::findOrFail($assignment->assessment_id);
		$user = User::findOrFail($assignment->user_id);
		$assignment->expiration = date('D, d M Y', strtotime($assignment->expires));

		return view('dashboard.assignments.edit', compact('assignment', 'assessment', 'user'));
    }

    /**
     * Update the specified assignment in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
		$data = $request->all();
		$assignment = Assignment::findOrFail($id);
		$expires = Carbon::createFromFormat('D, d M Y', $data['expiration']);

		$assignment->update([
			'expires' => $expires,
			'whitelabel' => $data['whitelabel']
		]);

		return redirect()->back()->with('success', 'Assignment has been updated successfully!');
    }

    /**
     * Remove the specified assignment from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
		$assignment = Assignment::findOrFail($id);

<<<<<<< HEAD
        // Delete the assignment itself
        $assignment->delete();
        dd($assignment);
        return redirect('dashboard/assignments')->with('success', 'Client '.$assignment->name.' deleted successfully!');
||||||| merged common ancestors
        // Delete the client itself
        $assignment->delete();
        dd($assignment);
        return redirect('dashboard/assignments')->with('success', 'Client '.$assignment->name.' deleted successfully!');
=======
		// Delete the client itself
		$assignment->delete();
		dd($assignment);
		return redirect('dashboard/assignments')->with('success', 'Client '.$assignment->name.' deleted successfully!');
>>>>>>> 5014c1dc62682d01434eae386c8319444c3e41bf
    }

	/**
     * Update the time left for a specified assignment.
     *
     * @param $id
     * @return \Illuminate\Http\JsonResponse
     */
    public function update_time_limit($id)
    {
        return \Response::json($this->getTimeLimit($id));
    }

	/**
     * Get time left until the time limit is reached for a specific assignment.
     *
     * @param $id
     * @return int
     */
    public function getTimeLimit($id)
    {
        $assignment = Assignment::findOrFail($id);
        $assessment = Assessment::findOrFail($assignment->assessment_id);

        return (60 * $assessment->time_limit) - (Carbon::now()->timestamp - $assignment->started_at->timestamp);
    }


	/**
	 * Update the specified answer in storage, creating one if it does not exist.
	 *
	 * @param $assignment
	 * @param $question_id
	 * @param $value
	 * @param null $time
	 * @return bool
	 */
    private function update_answer($assignment, $question_id, $value, $time = null)
    {
        $answer = $assignment->answers()->where('question_id', $question_id)->first();

        // If answer doesn't exist, create a new one
        if (empty($answer->id))
        {
            $answer = new Answer([
                'question_id' => $question_id,
                'user_id'     => $assignment->user_id,
                'value'       => $value,
                'time'        => $time
            ]);
            $assignment->answers()->save($answer);
            return true;
        }

        // Otherwise, update it
        $answer->update([
            'question_id' => $question_id,
            'user_id'     => $assignment->user_id,
            'value'       => $value,
            'time'        => $time,
        ]);

        return true;
    }


	/**
	 * Generate assignment for user.
	 *
	 * @param $assessment_id
	 * @param $user
	 * @param $expiration
	 * @param $custom_fields
	 * @return mixed
	 */
	public function generate_assignment_for_user($assessment_id, $user, $expiration, $whitelabel, $custom_fields, $target_id)
	{
		$expires = Carbon::createFromFormat('D, d M Y', $expiration);

		// Create new assignment
		$assignment = new Assignment([
			'assessment_id' => $assessment_id,
			'expires' => $expires,
			'whitelabel' => $whitelabel,
			'target_id' => $target_id,
		]);

		// Custom fields
		if ($custom_fields)
			$assignment->custom_fields = $custom_fields;

		$user->assignments()->save($assignment);

		// Generate encrypted url and save it
		$url = Assignment::generateURL($assignment->id, $user->username, $expires);
		$assignment->url = $url;
		$assignment->save();

		//$this->send_assignment_link_to_user($assignment->id);
		return $assignment->id;
	}

    /**
     * Create a new user and assign basic permissions.
     *
     * @param $name
     * @param $username
     * @param $email
     * @return User
     */
    public function create_new_user($name, $username, $email = null)
    {
        $user = new User([
            'name' => $name,
            'username' => $username,
            'email' => $email
        ]);
        $user->password = bcrypt($user->generate_password_for_user());
        $user->save();

        // Set low level user permissions
        $roleUser = Role::whereSlug('user')->first();
        $user->attachRole($roleUser);

        return $user;
    }

    /**
     * Send the specified assignments link to the user.
     *
     * @param User $user
     * @param Array Assignment $ids
     * @param Carbon $expiration
     * @param String $subject
     */
    private function send_assignment_link_to_user($user, $ids, $expiration, $subject, $body)
    {
        //$assignment = Assignment::findOrFail($id);
        //$user = $assignment->user;

        if ($user->email && !filter_var($user->email, FILTER_VALIDATE_EMAIL) === false)
        {
            $mailer = new Mailer();
            //$mailer->send_assignment($user, $id);
            $mailer->send_assignments($user, $ids, $expiration, $subject, $body);
        }
    }

	/**
     * Send a completion email to the user for the specified assignment.
     *
     * @param $id
     */
    private function send_completion_notification_to_user($id)
    {
        $user = \Auth::user();

        if ($user->email && !filter_var($user->email, FILTER_VALIDATE_EMAIL) === false)
        {
            $mailer = new Mailer();
            $mailer->send_completed($user, $id);
        }
    }

    public function add_user_to_assignment(Request $request)
    {
        $data = $request->all();

        $user = User::find($data['id']);

        $assessments = [];
        foreach ($data['assessments'] as $assessmentId)
            array_push($assessments, Assessment::find($assessmentId));

        return \Response::json([
            'user' => $user,
            'assessments' => $assessments
        ]);
    }

	/**
     * Add users to an assignment from a specific client.
     *
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function add_users_to_assignment_from_client(Request $request)
    {
        $data = $request->all();
        $client = Client::findOrFail($data['client']);

        $users = $client->users;

        return \Response::json(['users' => $users]);
    }

	/**
	 * Add users to an assignment from a specific group.
	 *
	 * @param $id
	 * @return \Illuminate\Http\JsonResponse
	 * @internal param Request $request
	 */
	public function addFromGroups($id)
	{
		$client = Client::findOrFail($id);
		$groups = $client->groups;
		$users = [];

		foreach ($groups as $group)
		{
			foreach ($group->users as $userArray)
			{
				$user = User::find($userArray['id']);
				$user->position = $userArray['position'];
				$user->leader = $userArray['leader'];

				if ($group->target_id)
					$user->target = User::find($group->target_id);

				array_push($users, $user);
			}
		}

		return \Response::json(['users' => $users]);
	}

    /**
     * Add users to an assignment from a specific client.
     *
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function add_users_to_assignment_from_job(Request $request)
    {
        $data = $request->all();
        $job = Job::findOrFail($data['job']);

        $users = $job->viableApplicants();

        return \Response::json(['users' => $users]);
    }

    /**
     * Download all assignment data for a specific client.
     *
     * @param $client_id
     * @return bool
     */
    public function download_all_assignments_for_client($client_id)
    {
        $client = Client::findOrFail($client_id);
        $users = $client->users;
        $filename = 'Assessment Data for '.$client->name.' '.Carbon::now();
        $assessments = [];

        foreach ($users as $user)
        {
            $assigned_assessments = [
                'assessment_ids' => [],
                'assignment_ids' => []
            ];

            foreach ($user->assignments as $assignment)
            {
                // Get the assessments that we'll be reporting on
                if (! in_array($assignment->assessment(), $assessments))
                    array_push($assessments, $assignment->assessment());

                // Get list of assessment ids that are assigned to this user
                array_push($assigned_assessments['assessment_ids'], $assignment->assessment_id);
                array_push($assigned_assessments['assignment_ids'], $assignment->id);

                // Get the questions
//                $assignment->questions = $assignment->assessment()->questions->filter(function($question) {
//                    return ($question->type != 2);
//                })->sortBy(function($question) {
//                    return $question->dimension_id;
//                });
            }

            $user->assigned_assessments = $assigned_assessments;
        }


        // Get the dimension codes for each question
//        foreach ($assessments as $assessment)
//        {
//            foreach ($assessment->questions as $question)
//            {
//                if (! $question->dimension())
//                {
//                    $question->dimension_code = $question->number;
//                    continue;
//                }
//
//                $question->dimension_code = '';
//
//                if ($question->dimension()->parent_exists())
//                    $question->dimension_code .= $question->dimension()->getParent()->code;
//
//                $question->dimension_code .= $question->dimension()->code;
//                $question->dimension_code .= $question->number;
//            }
//        }

        // Track progress
        sse_init();
        $total = $users->count() + 4;

        // Generate excel file
        $data = Excel::create($filename, function($excel) use ($client, $users, $assessments, $total)
        {
            $excel->setTitle('Assessment Details for '.$client->name);
            $excel->sheet('Details', function($sheet) use ($users, $assessments, $total)
            {
//                $sheet->loadView('excel.assignments.index', compact('users', 'assessments'));

                $i = 1;
                $row = [];
                sse_send($i, ($i / $total) * 100);

                // Row 1, Assessments
                $row = ['Identification', '', ''];
                foreach ($assessments as $assessment)
                {
                    array_push($row, $assessment->name);
                    for ($j = 0; $j < count($assessment->questions) - 1; $j++)
                        array_push($row, '');
                }
                $sheet->row($i, $row);
                $i++;
                sse_send($i, ($i / $total) * 100);

                // Row 2, Dimension Codes
                $row = ['UserID', 'Name', 'Email'];
                foreach ($assessments as $assessment)
                {
                    foreach ($assessment->filteredQuestions() as $question)
                        array_push($row, $question->dimension_code());
                }
                $sheet->row($i, $row);
                $i++;
                sse_send($i, ($i / $total) * 100);

                // Row 3, Questions
                $row = ['', '', ''];
                foreach ($assessments as $assessment)
                {
                    foreach ($assessment->filteredQuestions() as $question)
                        array_push($row, $question->number . '. ' . $question->content);
                }
                $sheet->row($i, $row);
                $i++;
                sse_send($i, ($i / $total) * 100);

                // User Rows
                foreach ($users as $user)
                {
                    // User Info and Scores
                    $row = [$user->username, $user->name, $user->email];
                    foreach ($assessments as $assessment)
                    {
                        // If user took this assessment
                        if (false !== $key = array_search($assessment->id, $user->assigned_assessments['assessment_ids']))
                        {
                            foreach ($assessment->filteredQuestions() as $question)
                            {
                                // If user answered this question, print score
                                if ($question->answer_exists($user->assigned_assessments['assignment_ids'][$key], $user->id))
                                    array_push($row, $question->answerFromAssignment($user->assigned_assessments['assignment_ids'][$key])->questionScore());

                                // Otherwise, print a blank
                                else
                                    array_push($row, '');
                            }
                        }

                        // Otherwise, print blanks
                        else
                        {
                            foreach ($assessment->filteredQuestions() as $question)
                                array_push($row, '');
                        }
                    }
                    $sheet->row($i, $row);
                    $i++;
                    sse_send($i, ($i / $total) * 100);
                }
            });
        });
        
        $return_data = $data->store('csv', false, true);
        
        sse_complete($return_data);

        return true;

//        $data->store('csv')->download('csv');

//        return view('excel.assignments.index', compact('users', 'assessments'));
    }

    /**
     * Upload and parse an excel spreadsheet of custom fields.
     *
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function upload_from_file(Request $request)
    {
        $data = $request->all();
        $users = [];

        $validator = Validator::make($data, [
            'file' => 'required|mimes:xls,xlsx'
        ]);

        if ($validator->fails())
            return \Response::json(['errors' => 'File must be a valid .xls or a .xlsx file format.']);

        Excel::load($data['file'], function($reader) use (&$users) {
            $results = $reader->all();

            $reader->each(function($sheet) use (&$users) {

                $sheet->each(function($row) use (&$users) {
                    $name = $row->name;
                    $email = $row->email;
                    $manager_name = $row->manager_name;
                    $manager_email = $row->manager_email;

                    if (! $row->email && $row->e_mail)
                        $email = $row->e_mail;

                    if (! $row->manager_name && $row->mngr_name)
                        $manager_name = $row->mngr_name;

                    if (! $row->manager_email && $row->mngr_email)
                        $manager_email = $row->mngr_email;

                    array_push($users, ['email' => $email, 'name' => $name, 'manager_name' => $manager_name, 'manager_email' => $manager_email]);
                });
            });
        });

        return \Response::json(['users' => $users]);
    }
}
